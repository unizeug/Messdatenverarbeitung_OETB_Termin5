
MDV_PR.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000002d2  00800200  00000da2  00000e36  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000da2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000010ad  008004d2  008004d2  00001108  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00001108  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ad  00000000  00000000  000011c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000010e8  00000000  00000000  00001475  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006eb  00000000  00000000  0000255d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000d21  00000000  00000000  00002c48  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000270  00000000  00000000  0000396c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000048d  00000000  00000000  00003bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000007a3  00000000  00000000  00004069  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  0000480c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 66 00 	jmp	0xcc	; 0xcc <__ctors_end>
   4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
   c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  10:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  14:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  18:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  1c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  20:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  24:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  28:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  2c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  30:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  34:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  38:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  3c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  40:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  44:	0c 94 f4 04 	jmp	0x9e8	; 0x9e8 <__vector_17>
  48:	0c 94 fe 04 	jmp	0x9fc	; 0x9fc <__vector_18>
  4c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  50:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  54:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  58:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  5c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  60:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  64:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  68:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  6c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  70:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  74:	0c 94 82 05 	jmp	0xb04	; 0xb04 <__vector_29>
  78:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  7c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  80:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  84:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  88:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  8c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  90:	0c 94 90 01 	jmp	0x320	; 0x320 <__vector_36>
  94:	0c 94 21 01 	jmp	0x242	; 0x242 <__vector_37>
  98:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  9c:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  a8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  ac:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  b0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  b4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  b8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  bc:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  c0:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  c4:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>
  c8:	0c 94 85 00 	jmp	0x10a	; 0x10a <__bad_interrupt>

000000cc <__ctors_end>:
  cc:	11 24       	eor	r1, r1
  ce:	1f be       	out	0x3f, r1	; 63
  d0:	cf ef       	ldi	r28, 0xFF	; 255
  d2:	d1 e2       	ldi	r29, 0x21	; 33
  d4:	de bf       	out	0x3e, r29	; 62
  d6:	cd bf       	out	0x3d, r28	; 61

000000d8 <__do_copy_data>:
  d8:	14 e0       	ldi	r17, 0x04	; 4
  da:	a0 e0       	ldi	r26, 0x00	; 0
  dc:	b2 e0       	ldi	r27, 0x02	; 2
  de:	e2 ea       	ldi	r30, 0xA2	; 162
  e0:	fd e0       	ldi	r31, 0x0D	; 13
  e2:	00 e0       	ldi	r16, 0x00	; 0
  e4:	0b bf       	out	0x3b, r16	; 59
  e6:	02 c0       	rjmp	.+4      	; 0xec <__do_copy_data+0x14>
  e8:	07 90       	elpm	r0, Z+
  ea:	0d 92       	st	X+, r0
  ec:	a2 3d       	cpi	r26, 0xD2	; 210
  ee:	b1 07       	cpc	r27, r17
  f0:	d9 f7       	brne	.-10     	; 0xe8 <__do_copy_data+0x10>

000000f2 <__do_clear_bss>:
  f2:	15 e1       	ldi	r17, 0x15	; 21
  f4:	a2 ed       	ldi	r26, 0xD2	; 210
  f6:	b4 e0       	ldi	r27, 0x04	; 4
  f8:	01 c0       	rjmp	.+2      	; 0xfc <.do_clear_bss_start>

000000fa <.do_clear_bss_loop>:
  fa:	1d 92       	st	X+, r1

000000fc <.do_clear_bss_start>:
  fc:	af 37       	cpi	r26, 0x7F	; 127
  fe:	b1 07       	cpc	r27, r17
 100:	e1 f7       	brne	.-8      	; 0xfa <.do_clear_bss_loop>
 102:	0e 94 87 00 	call	0x10e	; 0x10e <main>
 106:	0c 94 cf 06 	jmp	0xd9e	; 0xd9e <_exit>

0000010a <__bad_interrupt>:
 10a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000010e <main>:
/**
 * \brief main function of the data acquisition system
 * \author Jürgen Funck
 * \date 2010-03-24
 */
int main(void) {
 10e:	0f 93       	push	r16
 110:	1f 93       	push	r17
	cli();	// disable interrupts globally
 112:	f8 94       	cli
 	
	// set clock prescaler
	CLKPR = (1<<CLKPCE);
 114:	80 e8       	ldi	r24, 0x80	; 128
 116:	80 93 61 00 	sts	0x0061, r24
	CLKPR = 0;
 11a:	10 92 61 00 	sts	0x0061, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 11e:	86 e6       	ldi	r24, 0x66	; 102
 120:	9e e0       	ldi	r25, 0x0E	; 14
 122:	01 97       	sbiw	r24, 0x01	; 1
 124:	f1 f7       	brne	.-4      	; 0x122 <main+0x14>
	_delay_ms(2);


	// initialisation
	DDRC |= (1<<PC2);
 126:	3a 9a       	sbi	0x07, 2	; 7
	progState_t state = IDLE;
	adcInit();					// adc
 128:	0e 94 08 05 	call	0xa10	; 0xa10 <adcInit>
	filterInit();	 			// filter 
 12c:	0e 94 86 03 	call	0x70c	; 0x70c <filterInit>
	serialInit(BAUD_115200); 	// serial port
 130:	83 e0       	ldi	r24, 0x03	; 3
 132:	90 e0       	ldi	r25, 0x00	; 0
 134:	0e 94 c7 01 	call	0x38e	; 0x38e <serialInit>
	state = IDLE;				// state

	serialSendString("Hello World!\n");
 138:	80 e0       	ldi	r24, 0x00	; 0
 13a:	92 e0       	ldi	r25, 0x02	; 2
 13c:	0e 94 84 01 	call	0x308	; 0x308 <serialSendString>

	// set sleep-mode
	set_sleep_mode(SLEEP_MODE_IDLE);
 140:	83 b7       	in	r24, 0x33	; 51
 142:	81 7f       	andi	r24, 0xF1	; 241
 144:	83 bf       	out	0x33, r24	; 51

	sei(); // enable interrupts globally
 146:	78 94       	sei
 148:	80 e0       	ldi	r24, 0x00	; 0
	// main-loop
	int16_t val = 0;

	while(1) {
// ACQUIRE		
		switch(state) {
 14a:	81 30       	cpi	r24, 0x01	; 1
 14c:	19 f0       	breq	.+6      	; 0x154 <main+0x46>
 14e:	82 30       	cpi	r24, 0x02	; 2
 150:	e1 f4       	brne	.+56     	; 0x18a <main+0x7c>
 152:	04 c0       	rjmp	.+8      	; 0x15c <main+0x4e>
			case ANA_MEAS:
				if(adcIsRunning() > 0) {
 154:	0e 94 72 05 	call	0xae4	; 0xae4 <adcIsRunning>
 158:	88 23       	and	r24, r24
 15a:	e1 f7       	brne	.-8      	; 0x154 <main+0x46>
					state = FILT;
				}
				break;
// FILTER			
		        case FILT:
				if(filterWaitingVals() > FILTER_ORD) {
 15c:	0e 94 bf 02 	call	0x57e	; 0x57e <filterWaitingVals>
 160:	8e 54       	subi	r24, 0x4E	; 78
 162:	91 40       	sbci	r25, 0x01	; 1
 164:	80 f0       	brcs	.+32     	; 0x186 <main+0x78>
					if(decimation==OFF) {
 166:	80 91 7e 15 	lds	r24, 0x157E
 16a:	88 23       	and	r24, r24
 16c:	19 f4       	brne	.+6      	; 0x174 <main+0x66>
						val = filterFIR();//Identity();
 16e:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <filterFIR>
 172:	02 c0       	rjmp	.+4      	; 0x178 <main+0x6a>
					}
					else {
						val = filterFIRDecim();
 174:	0e 94 51 03 	call	0x6a2	; 0x6a2 <filterFIRDecim>
 178:	8c 01       	movw	r16, r24
					}
					while(serialSendWord(val)){}
 17a:	c8 01       	movw	r24, r16
 17c:	0e 94 66 01 	call	0x2cc	; 0x2cc <serialSendWord>
 180:	88 23       	and	r24, r24
 182:	d9 f7       	brne	.-10     	; 0x17a <main+0x6c>
 184:	eb cf       	rjmp	.-42     	; 0x15c <main+0x4e>
				}
				else {
					filterReset();
 186:	0e 94 ba 02 	call	0x574	; 0x574 <filterReset>
				break;
			case IDLE: 
			default:
// WAIT FOR COMMANDS
				// check incomming messages
				state = checkMessages();
 18a:	0e 94 eb 01 	call	0x3d6	; 0x3d6 <checkMessages>

				if(state == IDLE) {
 18e:	88 23       	and	r24, r24
 190:	e1 f6       	brne	.-72     	; 0x14a <main+0x3c>
					// sleep until the next interrupt
					sleep_enable();
 192:	83 b7       	in	r24, 0x33	; 51
 194:	81 60       	ori	r24, 0x01	; 1
 196:	83 bf       	out	0x33, r24	; 51
					sleep_cpu();
 198:	88 95       	sleep
					sleep_disable();
 19a:	83 b7       	in	r24, 0x33	; 51
 19c:	8e 7f       	andi	r24, 0xFE	; 254
 19e:	83 bf       	out	0x33, r24	; 51
 1a0:	f4 cf       	rjmp	.-24     	; 0x18a <main+0x7c>

000001a2 <serialNewLines>:

	return retCode;
}

uint16_t serialNewLines() {
	return lines;
 1a2:	20 91 66 05 	lds	r18, 0x0566
 1a6:	30 91 67 05 	lds	r19, 0x0567
}
 1aa:	c9 01       	movw	r24, r18
 1ac:	08 95       	ret

000001ae <serialReadByte>:

int bytesInRcvBuf() {
	return fifoBytes((fifo_t*)&rxBuf);
}

uint8_t serialReadByte() {
 1ae:	0f 93       	push	r16
 1b0:	1f 93       	push	r17
 1b2:	df 93       	push	r29
 1b4:	cf 93       	push	r28
 1b6:	0f 92       	push	r0
 1b8:	cd b7       	in	r28, 0x3d	; 61
 1ba:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte;
	while(fifoPopByte(&rxBuf, &byte)){}
 1bc:	8e 01       	movw	r16, r28
 1be:	0f 5f       	subi	r16, 0xFF	; 255
 1c0:	1f 4f       	sbci	r17, 0xFF	; 255
 1c2:	8c e1       	ldi	r24, 0x1C	; 28
 1c4:	95 e0       	ldi	r25, 0x05	; 5
 1c6:	b8 01       	movw	r22, r16
 1c8:	0e 94 40 04 	call	0x880	; 0x880 <fifoPopByte>
 1cc:	88 23       	and	r24, r24
 1ce:	c9 f7       	brne	.-14     	; 0x1c2 <serialReadByte+0x14>
	
	return byte;
}
 1d0:	89 81       	ldd	r24, Y+1	; 0x01
 1d2:	0f 90       	pop	r0
 1d4:	cf 91       	pop	r28
 1d6:	df 91       	pop	r29
 1d8:	1f 91       	pop	r17
 1da:	0f 91       	pop	r16
 1dc:	08 95       	ret

000001de <serialReadLine>:

uint8_t serialReadLine(char* str, uint16_t length) {
 1de:	ef 92       	push	r14
 1e0:	ff 92       	push	r15
 1e2:	0f 93       	push	r16
 1e4:	1f 93       	push	r17
 1e6:	cf 93       	push	r28
 1e8:	df 93       	push	r29
 1ea:	7c 01       	movw	r14, r24
 1ec:	8b 01       	movw	r16, r22
	uint8_t retCode = 0;

	if(lines > 0) {
 1ee:	80 91 66 05 	lds	r24, 0x0566
 1f2:	90 91 67 05 	lds	r25, 0x0567
 1f6:	89 2b       	or	r24, r25
 1f8:	11 f4       	brne	.+4      	; 0x1fe <serialReadLine+0x20>
 1fa:	81 e0       	ldi	r24, 0x01	; 1
 1fc:	1b c0       	rjmp	.+54     	; 0x234 <serialReadLine+0x56>
 1fe:	c0 e0       	ldi	r28, 0x00	; 0
 200:	d0 e0       	ldi	r29, 0x00	; 0
 202:	14 c0       	rjmp	.+40     	; 0x22c <serialReadLine+0x4e>
		for(uint16_t i=0; i<length; i++) {
			char c = (char)serialReadByte();
 204:	0e 94 d7 00 	call	0x1ae	; 0x1ae <serialReadByte>
			str[i] = c;
 208:	f7 01       	movw	r30, r14
 20a:	ec 0f       	add	r30, r28
 20c:	fd 1f       	adc	r31, r29
 20e:	80 83       	st	Z, r24
			if(c == '\n') {
 210:	8a 30       	cpi	r24, 0x0A	; 10
 212:	59 f4       	brne	.+22     	; 0x22a <serialReadLine+0x4c>
				str[i+1] = '\0';
 214:	11 82       	std	Z+1, r1	; 0x01
				lines--;
 216:	80 91 66 05 	lds	r24, 0x0566
 21a:	90 91 67 05 	lds	r25, 0x0567
 21e:	01 97       	sbiw	r24, 0x01	; 1
 220:	90 93 67 05 	sts	0x0567, r25
 224:	80 93 66 05 	sts	0x0566, r24
 228:	04 c0       	rjmp	.+8      	; 0x232 <serialReadLine+0x54>

uint8_t serialReadLine(char* str, uint16_t length) {
	uint8_t retCode = 0;

	if(lines > 0) {
		for(uint16_t i=0; i<length; i++) {
 22a:	21 96       	adiw	r28, 0x01	; 1
 22c:	c0 17       	cp	r28, r16
 22e:	d1 07       	cpc	r29, r17
 230:	48 f3       	brcs	.-46     	; 0x204 <serialReadLine+0x26>
 232:	80 e0       	ldi	r24, 0x00	; 0
	else {
		retCode = 1;
	}

	return retCode;
}
 234:	df 91       	pop	r29
 236:	cf 91       	pop	r28
 238:	1f 91       	pop	r17
 23a:	0f 91       	pop	r16
 23c:	ff 90       	pop	r15
 23e:	ef 90       	pop	r14
 240:	08 95       	ret

00000242 <__vector_37>:
 * \author Jürgen Funck
 * \date 2010-03-13
 * \brief interrupt-routine for the Usart-Data-Register-Empty-Interrupt.
 *		  is called when a byte has been send
 */
ISR(UDRE_vect) {
 242:	1f 92       	push	r1
 244:	0f 92       	push	r0
 246:	0f b6       	in	r0, 0x3f	; 63
 248:	0f 92       	push	r0
 24a:	0b b6       	in	r0, 0x3b	; 59
 24c:	0f 92       	push	r0
 24e:	11 24       	eor	r1, r1
 250:	2f 93       	push	r18
 252:	3f 93       	push	r19
 254:	4f 93       	push	r20
 256:	5f 93       	push	r21
 258:	6f 93       	push	r22
 25a:	7f 93       	push	r23
 25c:	8f 93       	push	r24
 25e:	9f 93       	push	r25
 260:	af 93       	push	r26
 262:	bf 93       	push	r27
 264:	ef 93       	push	r30
 266:	ff 93       	push	r31
 268:	df 93       	push	r29
 26a:	cf 93       	push	r28
 26c:	0f 92       	push	r0
 26e:	cd b7       	in	r28, 0x3d	; 61
 270:	de b7       	in	r29, 0x3e	; 62
	uint8_t byte;

	if(fifoPopByte(&txBuf, &byte) == 0) {// if data is in the send-buffer
 272:	82 ed       	ldi	r24, 0xD2	; 210
 274:	94 e0       	ldi	r25, 0x04	; 4
 276:	be 01       	movw	r22, r28
 278:	6f 5f       	subi	r22, 0xFF	; 255
 27a:	7f 4f       	sbci	r23, 0xFF	; 255
 27c:	0e 94 40 04 	call	0x880	; 0x880 <fifoPopByte>
 280:	88 23       	and	r24, r24
 282:	21 f4       	brne	.+8      	; 0x28c <__vector_37+0x4a>
		UDR = byte;					  // send byte
 284:	89 81       	ldd	r24, Y+1	; 0x01
 286:	80 93 ce 00 	sts	0x00CE, r24
 28a:	05 c0       	rjmp	.+10     	; 0x296 <__vector_37+0x54>
	}
	else {
		UCSRB &= ~(1<<UDRIE);		// disable Data-Register-Empty-Interrupt
 28c:	80 91 c9 00 	lds	r24, 0x00C9
 290:	8f 7d       	andi	r24, 0xDF	; 223
 292:	80 93 c9 00 	sts	0x00C9, r24
	}	
}
 296:	0f 90       	pop	r0
 298:	cf 91       	pop	r28
 29a:	df 91       	pop	r29
 29c:	ff 91       	pop	r31
 29e:	ef 91       	pop	r30
 2a0:	bf 91       	pop	r27
 2a2:	af 91       	pop	r26
 2a4:	9f 91       	pop	r25
 2a6:	8f 91       	pop	r24
 2a8:	7f 91       	pop	r23
 2aa:	6f 91       	pop	r22
 2ac:	5f 91       	pop	r21
 2ae:	4f 91       	pop	r20
 2b0:	3f 91       	pop	r19
 2b2:	2f 91       	pop	r18
 2b4:	0f 90       	pop	r0
 2b6:	0b be       	out	0x3b, r0	; 59
 2b8:	0f 90       	pop	r0
 2ba:	0f be       	out	0x3f, r0	; 63
 2bc:	0f 90       	pop	r0
 2be:	1f 90       	pop	r1
 2c0:	18 95       	reti

000002c2 <bytesInRcvBuf>:
		i++;								// next character
	}
}

int bytesInRcvBuf() {
	return fifoBytes((fifo_t*)&rxBuf);
 2c2:	8c e1       	ldi	r24, 0x1C	; 28
 2c4:	95 e0       	ldi	r25, 0x05	; 5
 2c6:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fifoBytes>
}
 2ca:	08 95       	ret

000002cc <serialSendWord>:
	}

	return retCode;
}

uint8_t serialSendWord(int16_t w) {
 2cc:	bc 01       	movw	r22, r24
	uint8_t retCode = fifoPushWord(&txBuf, w);
 2ce:	82 ed       	ldi	r24, 0xD2	; 210
 2d0:	94 e0       	ldi	r25, 0x04	; 4
 2d2:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fifoPushWord>
 2d6:	98 2f       	mov	r25, r24

	if(retCode == 0) {
 2d8:	88 23       	and	r24, r24
 2da:	29 f4       	brne	.+10     	; 0x2e6 <serialSendWord+0x1a>
		UCSRB |= (1<<UDRIE);		// enable Data-Register-Empty-Interrupt
 2dc:	80 91 c9 00 	lds	r24, 0x00C9
 2e0:	80 62       	ori	r24, 0x20	; 32
 2e2:	80 93 c9 00 	sts	0x00C9, r24
	}

	return retCode;
}
 2e6:	89 2f       	mov	r24, r25
 2e8:	08 95       	ret

000002ea <serialSendByte>:
	UCSRB = (1<<RXCIE)| (1<<RXEN) | (1<<TXEN); 	// enable send/receive
	UCSRC = (0x03<<1); 							// asynchronous mode, no Parity, 8 DataBits, 1 Stop-Bit, no Parity
	UBRR  = baudrate;
}

uint8_t serialSendByte(uint8_t b) {
 2ea:	68 2f       	mov	r22, r24
	uint8_t retCode = fifoPushByte((fifo_t*)&txBuf, b);
 2ec:	82 ed       	ldi	r24, 0xD2	; 210
 2ee:	94 e0       	ldi	r25, 0x04	; 4
 2f0:	0e 94 a9 03 	call	0x752	; 0x752 <fifoPushByte>
 2f4:	98 2f       	mov	r25, r24

	if(retCode == 0) {
 2f6:	88 23       	and	r24, r24
 2f8:	29 f4       	brne	.+10     	; 0x304 <serialSendByte+0x1a>
		UCSRB |= (1<<UDRIE);		// enable Data-Register-Empty-Interrupt
 2fa:	80 91 c9 00 	lds	r24, 0x00C9
 2fe:	80 62       	ori	r24, 0x20	; 32
 300:	80 93 c9 00 	sts	0x00C9, r24
	}

	return retCode;
}
 304:	89 2f       	mov	r24, r25
 306:	08 95       	ret

00000308 <serialSendString>:
	}

	return retCode;
}

void serialSendString(const char* str) {
 308:	cf 93       	push	r28
 30a:	df 93       	push	r29
 30c:	ec 01       	movw	r28, r24
 30e:	02 c0       	rjmp	.+4      	; 0x314 <serialSendString+0xc>
	uint16_t i=0;
	
	while(str[i] != '\0') {	// send string character by character
		serialSendByte((uint8_t)str[i]);	// send character
 310:	0e 94 75 01 	call	0x2ea	; 0x2ea <serialSendByte>
}

void serialSendString(const char* str) {
	uint16_t i=0;
	
	while(str[i] != '\0') {	// send string character by character
 314:	89 91       	ld	r24, Y+
 316:	88 23       	and	r24, r24
 318:	d9 f7       	brne	.-10     	; 0x310 <serialSendString+0x8>
		serialSendByte((uint8_t)str[i]);	// send character
		i++;								// next character
	}
}
 31a:	df 91       	pop	r29
 31c:	cf 91       	pop	r28
 31e:	08 95       	ret

00000320 <__vector_36>:
 * \author Jürgen Funck
 * \date 2010-03-13
 * \brief interrupt-routine for the Usart-Receive-Complete-Interrupt.
 *		  is called when a byte has been send
 */
ISR(RX_vect) {
 320:	1f 92       	push	r1
 322:	0f 92       	push	r0
 324:	0f b6       	in	r0, 0x3f	; 63
 326:	0f 92       	push	r0
 328:	0b b6       	in	r0, 0x3b	; 59
 32a:	0f 92       	push	r0
 32c:	11 24       	eor	r1, r1
 32e:	2f 93       	push	r18
 330:	3f 93       	push	r19
 332:	4f 93       	push	r20
 334:	5f 93       	push	r21
 336:	6f 93       	push	r22
 338:	7f 93       	push	r23
 33a:	8f 93       	push	r24
 33c:	9f 93       	push	r25
 33e:	af 93       	push	r26
 340:	bf 93       	push	r27
 342:	ef 93       	push	r30
 344:	ff 93       	push	r31
	uint8_t byte = UDR;
 346:	60 91 ce 00 	lds	r22, 0x00CE

	if(byte == '\n'){
 34a:	6a 30       	cpi	r22, 0x0A	; 10
 34c:	49 f4       	brne	.+18     	; 0x360 <__vector_36+0x40>
		lines++;
 34e:	80 91 66 05 	lds	r24, 0x0566
 352:	90 91 67 05 	lds	r25, 0x0567
 356:	01 96       	adiw	r24, 0x01	; 1
 358:	90 93 67 05 	sts	0x0567, r25
 35c:	80 93 66 05 	sts	0x0566, r24
	}

	fifoPushByte((fifo_t*)&rxBuf, byte);
 360:	8c e1       	ldi	r24, 0x1C	; 28
 362:	95 e0       	ldi	r25, 0x05	; 5
 364:	0e 94 a9 03 	call	0x752	; 0x752 <fifoPushByte>
}
 368:	ff 91       	pop	r31
 36a:	ef 91       	pop	r30
 36c:	bf 91       	pop	r27
 36e:	af 91       	pop	r26
 370:	9f 91       	pop	r25
 372:	8f 91       	pop	r24
 374:	7f 91       	pop	r23
 376:	6f 91       	pop	r22
 378:	5f 91       	pop	r21
 37a:	4f 91       	pop	r20
 37c:	3f 91       	pop	r19
 37e:	2f 91       	pop	r18
 380:	0f 90       	pop	r0
 382:	0b be       	out	0x3b, r0	; 59
 384:	0f 90       	pop	r0
 386:	0f be       	out	0x3f, r0	; 63
 388:	0f 90       	pop	r0
 38a:	1f 90       	pop	r1
 38c:	18 95       	reti

0000038e <serialInit>:

/*** FUNCTIONS ***/

void serialInit(uint16_t baudrate) {
 38e:	0f 93       	push	r16
 390:	1f 93       	push	r17
 392:	8c 01       	movw	r16, r24
	lines = 0;
 394:	10 92 67 05 	sts	0x0567, r1
 398:	10 92 66 05 	sts	0x0566, r1

	// initialise send- and receive buffer
	fifoInit(&txBuf, (uint8_t*)txBufMem, TX_BUFFER_MASK);
 39c:	82 ed       	ldi	r24, 0xD2	; 210
 39e:	94 e0       	ldi	r25, 0x04	; 4
 3a0:	6c ed       	ldi	r22, 0xDC	; 220
 3a2:	74 e0       	ldi	r23, 0x04	; 4
 3a4:	40 e4       	ldi	r20, 0x40	; 64
 3a6:	50 e0       	ldi	r21, 0x00	; 0
 3a8:	0e 94 8f 03 	call	0x71e	; 0x71e <fifoInit>
	fifoInit(&rxBuf, (uint8_t*)rxBufMem, RX_BUFFER_MASK);
 3ac:	8c e1       	ldi	r24, 0x1C	; 28
 3ae:	95 e0       	ldi	r25, 0x05	; 5
 3b0:	66 e2       	ldi	r22, 0x26	; 38
 3b2:	75 e0       	ldi	r23, 0x05	; 5
 3b4:	40 e4       	ldi	r20, 0x40	; 64
 3b6:	50 e0       	ldi	r21, 0x00	; 0
 3b8:	0e 94 8f 03 	call	0x71e	; 0x71e <fifoInit>
	
	// initialise usart
	UCSRB = (1<<RXCIE)| (1<<RXEN) | (1<<TXEN); 	// enable send/receive
 3bc:	88 e9       	ldi	r24, 0x98	; 152
 3be:	80 93 c9 00 	sts	0x00C9, r24
	UCSRC = (0x03<<1); 							// asynchronous mode, no Parity, 8 DataBits, 1 Stop-Bit, no Parity
 3c2:	86 e0       	ldi	r24, 0x06	; 6
 3c4:	80 93 ca 00 	sts	0x00CA, r24
	UBRR  = baudrate;
 3c8:	10 93 cd 00 	sts	0x00CD, r17
 3cc:	00 93 cc 00 	sts	0x00CC, r16
}
 3d0:	1f 91       	pop	r17
 3d2:	0f 91       	pop	r16
 3d4:	08 95       	ret

000003d6 <checkMessages>:
#include "command.h"
#include "serial.h"
#include "adc.h"
#include "filter.h"

progState_t checkMessages() {
 3d6:	9f 92       	push	r9
 3d8:	af 92       	push	r10
 3da:	bf 92       	push	r11
 3dc:	cf 92       	push	r12
 3de:	df 92       	push	r13
 3e0:	ef 92       	push	r14
 3e2:	ff 92       	push	r15
 3e4:	0f 93       	push	r16
 3e6:	1f 93       	push	r17
 3e8:	df 93       	push	r29
 3ea:	cf 93       	push	r28
 3ec:	cd b7       	in	r28, 0x3d	; 61
 3ee:	de b7       	in	r29, 0x3e	; 62
 3f0:	a1 97       	sbiw	r28, 0x21	; 33
 3f2:	0f b6       	in	r0, 0x3f	; 63
 3f4:	f8 94       	cli
 3f6:	de bf       	out	0x3e, r29	; 62
 3f8:	0f be       	out	0x3f, r0	; 63
 3fa:	cd bf       	out	0x3d, r28	; 61
	progState_t newState = IDLE;
	char msg[MAX_COMMAND_LINE_LENGTH+1];

	if(serialReadLine(msg,MAX_COMMAND_LINE_LENGTH) == 0) {
 3fc:	8e 01       	movw	r16, r28
 3fe:	0f 5f       	subi	r16, 0xFF	; 255
 400:	1f 4f       	sbci	r17, 0xFF	; 255
 402:	c8 01       	movw	r24, r16
 404:	60 e2       	ldi	r22, 0x20	; 32
 406:	70 e0       	ldi	r23, 0x00	; 0
 408:	0e 94 ef 00 	call	0x1de	; 0x1de <serialReadLine>
 40c:	88 23       	and	r24, r24
 40e:	09 f0       	breq	.+2      	; 0x412 <checkMessages+0x3c>
 410:	9e c0       	rjmp	.+316    	; 0x54e <checkMessages+0x178>

		if(strncmp("ANA",msg,3)==0) {
 412:	8e e0       	ldi	r24, 0x0E	; 14
 414:	92 e0       	ldi	r25, 0x02	; 2
 416:	b8 01       	movw	r22, r16
 418:	43 e0       	ldi	r20, 0x03	; 3
 41a:	50 e0       	ldi	r21, 0x00	; 0
 41c:	0e 94 7d 06 	call	0xcfa	; 0xcfa <strncmp>
 420:	00 97       	sbiw	r24, 0x00	; 0
 422:	09 f0       	breq	.+2      	; 0x426 <checkMessages+0x50>
 424:	87 c0       	rjmp	.+270    	; 0x534 <checkMessages+0x15e>
			// parse parameters
			char* p_param = strtok(msg," ");
 426:	c8 01       	movw	r24, r16
 428:	62 e1       	ldi	r22, 0x12	; 18
 42a:	72 e0       	ldi	r23, 0x02	; 2
 42c:	0e 94 78 06 	call	0xcf0	; 0xcf0 <strtok>
			uint16_t sRate      = 0;
			uint32_t sCount     = 0;
			trigger_t tMode     = NONE;
			int16_t tLevel      = 0;

			p_param = strtok(NULL," ");
 430:	80 e0       	ldi	r24, 0x00	; 0
 432:	90 e0       	ldi	r25, 0x00	; 0
 434:	62 e1       	ldi	r22, 0x12	; 18
 436:	72 e0       	ldi	r23, 0x02	; 2
 438:	0e 94 78 06 	call	0xcf0	; 0xcf0 <strtok>
			if(p_param != NULL) {
 43c:	00 97       	sbiw	r24, 0x00	; 0
 43e:	19 f4       	brne	.+6      	; 0x446 <checkMessages+0x70>
 440:	aa 24       	eor	r10, r10
 442:	bb 24       	eor	r11, r11
 444:	03 c0       	rjmp	.+6      	; 0x44c <checkMessages+0x76>
				sRate = atoi(p_param);
 446:	0e 94 33 06 	call	0xc66	; 0xc66 <atoi>
 44a:	5c 01       	movw	r10, r24
			}

			p_param = strtok(NULL," ");
 44c:	80 e0       	ldi	r24, 0x00	; 0
 44e:	90 e0       	ldi	r25, 0x00	; 0
 450:	62 e1       	ldi	r22, 0x12	; 18
 452:	72 e0       	ldi	r23, 0x02	; 2
 454:	0e 94 78 06 	call	0xcf0	; 0xcf0 <strtok>
			if(p_param != NULL) {
 458:	00 97       	sbiw	r24, 0x00	; 0
 45a:	21 f4       	brne	.+8      	; 0x464 <checkMessages+0x8e>
 45c:	ee 24       	eor	r14, r14
 45e:	ff 24       	eor	r15, r15
 460:	87 01       	movw	r16, r14
 462:	07 c0       	rjmp	.+14     	; 0x472 <checkMessages+0x9c>
				sCount = atol(p_param);
 464:	0e 94 51 06 	call	0xca2	; 0xca2 <atol>
 468:	ac 01       	movw	r20, r24
 46a:	cb 01       	movw	r24, r22
 46c:	da 01       	movw	r26, r20
 46e:	7c 01       	movw	r14, r24
 470:	8d 01       	movw	r16, r26
			}

			p_param = strtok(NULL," ");
 472:	80 e0       	ldi	r24, 0x00	; 0
 474:	90 e0       	ldi	r25, 0x00	; 0
 476:	62 e1       	ldi	r22, 0x12	; 18
 478:	72 e0       	ldi	r23, 0x02	; 2
 47a:	0e 94 78 06 	call	0xcf0	; 0xcf0 <strtok>
			if(p_param != NULL) {
 47e:	00 97       	sbiw	r24, 0x00	; 0
 480:	11 f4       	brne	.+4      	; 0x486 <checkMessages+0xb0>
 482:	99 24       	eor	r9, r9
 484:	03 c0       	rjmp	.+6      	; 0x48c <checkMessages+0xb6>
				tMode = atoi(p_param);
 486:	0e 94 33 06 	call	0xc66	; 0xc66 <atoi>
 48a:	98 2e       	mov	r9, r24
			}

			p_param = strtok(NULL," ");
 48c:	80 e0       	ldi	r24, 0x00	; 0
 48e:	90 e0       	ldi	r25, 0x00	; 0
 490:	62 e1       	ldi	r22, 0x12	; 18
 492:	72 e0       	ldi	r23, 0x02	; 2
 494:	0e 94 78 06 	call	0xcf0	; 0xcf0 <strtok>
			if(p_param != NULL) {
 498:	00 97       	sbiw	r24, 0x00	; 0
 49a:	19 f4       	brne	.+6      	; 0x4a2 <checkMessages+0xcc>
 49c:	cc 24       	eor	r12, r12
 49e:	dd 24       	eor	r13, r13
 4a0:	03 c0       	rjmp	.+6      	; 0x4a8 <checkMessages+0xd2>
				tLevel = atoi(p_param);
 4a2:	0e 94 33 06 	call	0xc66	; 0xc66 <atoi>
 4a6:	6c 01       	movw	r12, r24
			}
			p_param = strtok(NULL," ");
 4a8:	80 e0       	ldi	r24, 0x00	; 0
 4aa:	90 e0       	ldi	r25, 0x00	; 0
 4ac:	62 e1       	ldi	r22, 0x12	; 18
 4ae:	72 e0       	ldi	r23, 0x02	; 2
 4b0:	0e 94 78 06 	call	0xcf0	; 0xcf0 <strtok>
			if(p_param != NULL) {
 4b4:	00 97       	sbiw	r24, 0x00	; 0
 4b6:	21 f0       	breq	.+8      	; 0x4c0 <checkMessages+0xea>
				decimation = atoi(p_param);
 4b8:	0e 94 33 06 	call	0xc66	; 0xc66 <atoi>
 4bc:	80 93 7e 15 	sts	0x157E, r24
			}

			if((sRate != 0) && (sCount != 0)) {
 4c0:	a1 14       	cp	r10, r1
 4c2:	b1 04       	cpc	r11, r1
 4c4:	69 f1       	breq	.+90     	; 0x520 <checkMessages+0x14a>
 4c6:	e1 14       	cp	r14, r1
 4c8:	f1 04       	cpc	r15, r1
 4ca:	01 05       	cpc	r16, r1
 4cc:	11 05       	cpc	r17, r1
 4ce:	41 f1       	breq	.+80     	; 0x520 <checkMessages+0x14a>
				if(decimation==ON) {
 4d0:	80 91 7e 15 	lds	r24, 0x157E
 4d4:	81 30       	cpi	r24, 0x01	; 1
 4d6:	99 f4       	brne	.+38     	; 0x4fe <checkMessages+0x128>
					adcStart(sRate,DEC_RATIO*sCount+FILTER_ORD,tMode,tLevel);
 4d8:	b8 01       	movw	r22, r16
 4da:	a7 01       	movw	r20, r14
 4dc:	82 e0       	ldi	r24, 0x02	; 2
 4de:	44 0f       	add	r20, r20
 4e0:	55 1f       	adc	r21, r21
 4e2:	66 1f       	adc	r22, r22
 4e4:	77 1f       	adc	r23, r23
 4e6:	8a 95       	dec	r24
 4e8:	d1 f7       	brne	.-12     	; 0x4de <checkMessages+0x108>
 4ea:	4e 0d       	add	r20, r14
 4ec:	5f 1d       	adc	r21, r15
 4ee:	60 1f       	adc	r22, r16
 4f0:	71 1f       	adc	r23, r17
 4f2:	43 5b       	subi	r20, 0xB3	; 179
 4f4:	5e 4f       	sbci	r21, 0xFE	; 254
 4f6:	6f 4f       	sbci	r22, 0xFF	; 255
 4f8:	7f 4f       	sbci	r23, 0xFF	; 255
 4fa:	c5 01       	movw	r24, r10
 4fc:	0b c0       	rjmp	.+22     	; 0x514 <checkMessages+0x13e>
				}
				else {
					adcStart(sRate,sCount+FILTER_ORD,tMode,tLevel);
 4fe:	8d e4       	ldi	r24, 0x4D	; 77
 500:	91 e0       	ldi	r25, 0x01	; 1
 502:	a0 e0       	ldi	r26, 0x00	; 0
 504:	b0 e0       	ldi	r27, 0x00	; 0
 506:	e8 0e       	add	r14, r24
 508:	f9 1e       	adc	r15, r25
 50a:	0a 1f       	adc	r16, r26
 50c:	1b 1f       	adc	r17, r27
 50e:	c5 01       	movw	r24, r10
 510:	b8 01       	movw	r22, r16
 512:	a7 01       	movw	r20, r14
 514:	29 2d       	mov	r18, r9
 516:	86 01       	movw	r16, r12
 518:	0e 94 23 05 	call	0xa46	; 0xa46 <adcStart>
 51c:	81 e0       	ldi	r24, 0x01	; 1
 51e:	18 c0       	rjmp	.+48     	; 0x550 <checkMessages+0x17a>
				}
				newState = ANA_MEAS;
			}
			else {
				serialSendString("invalid parameters");
 520:	84 e1       	ldi	r24, 0x14	; 20
 522:	92 e0       	ldi	r25, 0x02	; 2
 524:	0e 94 84 01 	call	0x308	; 0x308 <serialSendString>
				serialSendByte('\'');
 528:	87 e2       	ldi	r24, 0x27	; 39
 52a:	0e 94 75 01 	call	0x2ea	; 0x2ea <serialSendByte>
				serialSendString(msg);
 52e:	ce 01       	movw	r24, r28
 530:	01 96       	adiw	r24, 0x01	; 1
 532:	08 c0       	rjmp	.+16     	; 0x544 <checkMessages+0x16e>
				serialSendByte('\'');
				newState = IDLE;
			}
		}
		else {
			serialSendString("unknown command");
 534:	87 e2       	ldi	r24, 0x27	; 39
 536:	92 e0       	ldi	r25, 0x02	; 2
 538:	0e 94 84 01 	call	0x308	; 0x308 <serialSendString>
			serialSendByte('\'');
 53c:	87 e2       	ldi	r24, 0x27	; 39
 53e:	0e 94 75 01 	call	0x2ea	; 0x2ea <serialSendByte>
			serialSendString(msg);
 542:	c8 01       	movw	r24, r16
 544:	0e 94 84 01 	call	0x308	; 0x308 <serialSendString>
			serialSendByte('\'');	
 548:	87 e2       	ldi	r24, 0x27	; 39
 54a:	0e 94 75 01 	call	0x2ea	; 0x2ea <serialSendByte>
 54e:	80 e0       	ldi	r24, 0x00	; 0
			newState = IDLE;
		}
	}	

	return newState;
}
 550:	a1 96       	adiw	r28, 0x21	; 33
 552:	0f b6       	in	r0, 0x3f	; 63
 554:	f8 94       	cli
 556:	de bf       	out	0x3e, r29	; 62
 558:	0f be       	out	0x3f, r0	; 63
 55a:	cd bf       	out	0x3d, r28	; 61
 55c:	cf 91       	pop	r28
 55e:	df 91       	pop	r29
 560:	1f 91       	pop	r17
 562:	0f 91       	pop	r16
 564:	ff 90       	pop	r15
 566:	ef 90       	pop	r14
 568:	df 90       	pop	r13
 56a:	cf 90       	pop	r12
 56c:	bf 90       	pop	r11
 56e:	af 90       	pop	r10
 570:	9f 90       	pop	r9
 572:	08 95       	ret

00000574 <filterReset>:
inline uint16_t filterWaitingVals() {
	return fifoBytes(&filtInBuf)/2;
}

void filterReset() {
	fifoClear(&filtInBuf);
 574:	88 e6       	ldi	r24, 0x68	; 104
 576:	95 e0       	ldi	r25, 0x05	; 5
 578:	0e 94 9e 03 	call	0x73c	; 0x73c <fifoClear>
}
 57c:	08 95       	ret

0000057e <filterWaitingVals>:
inline uint8_t filterWrite2Buf(int16_t val) {
	return fifoPushWord(&filtInBuf, val);
}

inline uint16_t filterWaitingVals() {
	return fifoBytes(&filtInBuf)/2;
 57e:	88 e6       	ldi	r24, 0x68	; 104
 580:	95 e0       	ldi	r25, 0x05	; 5
 582:	0e 94 ec 04 	call	0x9d8	; 0x9d8 <fifoBytes>
 586:	9c 01       	movw	r18, r24
 588:	36 95       	lsr	r19
 58a:	27 95       	ror	r18
}
 58c:	c9 01       	movw	r24, r18
 58e:	08 95       	ret

00000590 <filterWrite2Buf>:
	PORTC &= ~(1<<PC2);
	//_delay_ms(20);
	return a;
}

inline uint8_t filterWrite2Buf(int16_t val) {
 590:	bc 01       	movw	r22, r24
	return fifoPushWord(&filtInBuf, val);
 592:	88 e6       	ldi	r24, 0x68	; 104
 594:	95 e0       	ldi	r25, 0x05	; 5
 596:	0e 94 e0 03 	call	0x7c0	; 0x7c0 <fifoPushWord>
}
 59a:	08 95       	ret

0000059c <filterIdentity>:
void filterInit() {
	//initialise In- and Outputbuffer
	fifoInit(&filtInBuf,  (uint8_t*)filtInBufMem,2*(FILTER_IN_BUF_MASK));
}

int16_t filterIdentity() {
 59c:	0f 93       	push	r16
 59e:	1f 93       	push	r17
 5a0:	df 93       	push	r29
 5a2:	cf 93       	push	r28
 5a4:	00 d0       	rcall	.+0      	; 0x5a6 <filterIdentity+0xa>
 5a6:	cd b7       	in	r28, 0x3d	; 61
 5a8:	de b7       	in	r29, 0x3e	; 62
	int16_t val;
	
	decimation 		  = OFF;
 5aa:	10 92 7e 15 	sts	0x157E, r1
	while(fifoPopWord(&filtInBuf, &val));
 5ae:	8e 01       	movw	r16, r28
 5b0:	0f 5f       	subi	r16, 0xFF	; 255
 5b2:	1f 4f       	sbci	r17, 0xFF	; 255
 5b4:	88 e6       	ldi	r24, 0x68	; 104
 5b6:	95 e0       	ldi	r25, 0x05	; 5
 5b8:	b8 01       	movw	r22, r16
 5ba:	0e 94 78 04 	call	0x8f0	; 0x8f0 <fifoPopWord>
 5be:	88 23       	and	r24, r24
 5c0:	c9 f7       	brne	.-14     	; 0x5b4 <filterIdentity+0x18>
	return val;
}
 5c2:	89 81       	ldd	r24, Y+1	; 0x01
 5c4:	9a 81       	ldd	r25, Y+2	; 0x02
 5c6:	0f 90       	pop	r0
 5c8:	0f 90       	pop	r0
 5ca:	cf 91       	pop	r28
 5cc:	df 91       	pop	r29
 5ce:	1f 91       	pop	r17
 5d0:	0f 91       	pop	r16
 5d2:	08 95       	ret

000005d4 <filterFIR>:

uint16_t filterFIR() {
 5d4:	af 92       	push	r10
 5d6:	bf 92       	push	r11
 5d8:	cf 92       	push	r12
 5da:	df 92       	push	r13
 5dc:	ef 92       	push	r14
 5de:	ff 92       	push	r15
 5e0:	0f 93       	push	r16
 5e2:	1f 93       	push	r17
 5e4:	df 93       	push	r29
 5e6:	cf 93       	push	r28
 5e8:	00 d0       	rcall	.+0      	; 0x5ea <filterFIR+0x16>
 5ea:	cd b7       	in	r28, 0x3d	; 61
 5ec:	de b7       	in	r29, 0x3e	; 62
 5ee:	47 e3       	ldi	r20, 0x37	; 55
 5f0:	e4 2e       	mov	r14, r20
 5f2:	42 e0       	ldi	r20, 0x02	; 2
 5f4:	f4 2e       	mov	r15, r20
 5f6:	00 e0       	ldi	r16, 0x00	; 0
 5f8:	10 e0       	ldi	r17, 0x00	; 0
 5fa:	cc 24       	eor	r12, r12
 5fc:	dd 24       	eor	r13, r13
	int16_t accum = 0;
	int16_t val;

	// calculate output values of the filter
	for(i=0; i<FILTER_ORD; i++) {
		if(fifoReadWord(&filtInBuf, FILTER_ORD-(i+1), &val)==0) {
 5fe:	5e 01       	movw	r10, r28
 600:	08 94       	sec
 602:	a1 1c       	adc	r10, r1
 604:	b1 1c       	adc	r11, r1
 606:	b8 01       	movw	r22, r16
 608:	60 95       	com	r22
 60a:	70 95       	com	r23
 60c:	63 5b       	subi	r22, 0xB3	; 179
 60e:	7e 4f       	sbci	r23, 0xFE	; 254
 610:	88 e6       	ldi	r24, 0x68	; 104
 612:	95 e0       	ldi	r25, 0x05	; 5
 614:	a5 01       	movw	r20, r10
 616:	0e 94 b5 04 	call	0x96a	; 0x96a <fifoReadWord>
 61a:	88 23       	and	r24, r24
 61c:	e9 f4       	brne	.+58     	; 0x658 <filterFIR+0x84>
			val = (val << 6);
 61e:	69 81       	ldd	r22, Y+1	; 0x01
 620:	7a 81       	ldd	r23, Y+2	; 0x02
 622:	36 e0       	ldi	r19, 0x06	; 6
 624:	66 0f       	add	r22, r22
 626:	77 1f       	adc	r23, r23
 628:	3a 95       	dec	r19
 62a:	e1 f7       	brne	.-8      	; 0x624 <filterFIR+0x50>
 62c:	7a 83       	std	Y+2, r23	; 0x02
 62e:	69 83       	std	Y+1, r22	; 0x01
			accum += (((int32_t)FIRkoeff[i]) * val)>>16;
 630:	88 27       	eor	r24, r24
 632:	77 fd       	sbrc	r23, 7
 634:	80 95       	com	r24
 636:	98 2f       	mov	r25, r24
 638:	f7 01       	movw	r30, r14
 63a:	20 81       	ld	r18, Z
 63c:	31 81       	ldd	r19, Z+1	; 0x01
 63e:	44 27       	eor	r20, r20
 640:	37 fd       	sbrc	r19, 7
 642:	40 95       	com	r20
 644:	54 2f       	mov	r21, r20
 646:	0e 94 14 06 	call	0xc28	; 0xc28 <__mulsi3>
 64a:	bc 01       	movw	r22, r24
 64c:	99 27       	eor	r25, r25
 64e:	77 fd       	sbrc	r23, 7
 650:	90 95       	com	r25
 652:	89 2f       	mov	r24, r25
 654:	c6 0e       	add	r12, r22
 656:	d7 1e       	adc	r13, r23
	uint16_t i;
	int16_t accum = 0;
	int16_t val;

	// calculate output values of the filter
	for(i=0; i<FILTER_ORD; i++) {
 658:	0f 5f       	subi	r16, 0xFF	; 255
 65a:	1f 4f       	sbci	r17, 0xFF	; 255
 65c:	82 e0       	ldi	r24, 0x02	; 2
 65e:	90 e0       	ldi	r25, 0x00	; 0
 660:	e8 0e       	add	r14, r24
 662:	f9 1e       	adc	r15, r25
 664:	91 e0       	ldi	r25, 0x01	; 1
 666:	0d 34       	cpi	r16, 0x4D	; 77
 668:	19 07       	cpc	r17, r25
 66a:	69 f6       	brne	.-102    	; 0x606 <filterFIR+0x32>
			val = (val << 6);
			accum += (((int32_t)FIRkoeff[i]) * val)>>16;
		}
	}
	// delete the oldest value from the buffer
	fifoPopWord(&filtInBuf, &val);
 66c:	88 e6       	ldi	r24, 0x68	; 104
 66e:	95 e0       	ldi	r25, 0x05	; 5
 670:	be 01       	movw	r22, r28
 672:	6f 5f       	subi	r22, 0xFF	; 255
 674:	7f 4f       	sbci	r23, 0xFF	; 255
 676:	0e 94 78 04 	call	0x8f0	; 0x8f0 <fifoPopWord>
 67a:	96 01       	movw	r18, r12
 67c:	95 e0       	ldi	r25, 0x05	; 5
 67e:	35 95       	asr	r19
 680:	27 95       	ror	r18
 682:	9a 95       	dec	r25
 684:	e1 f7       	brne	.-8      	; 0x67e <filterFIR+0xaa>

	// convert to integer values
	return (accum >> 5);	
}
 686:	c9 01       	movw	r24, r18
 688:	0f 90       	pop	r0
 68a:	0f 90       	pop	r0
 68c:	cf 91       	pop	r28
 68e:	df 91       	pop	r29
 690:	1f 91       	pop	r17
 692:	0f 91       	pop	r16
 694:	ff 90       	pop	r15
 696:	ef 90       	pop	r14
 698:	df 90       	pop	r13
 69a:	cf 90       	pop	r12
 69c:	bf 90       	pop	r11
 69e:	af 90       	pop	r10
 6a0:	08 95       	ret

000006a2 <filterFIRDecim>:

uint16_t filterFIRDecim() {
 6a2:	cf 92       	push	r12
 6a4:	df 92       	push	r13
 6a6:	ef 92       	push	r14
 6a8:	ff 92       	push	r15
 6aa:	0f 93       	push	r16
 6ac:	1f 93       	push	r17
 6ae:	df 93       	push	r29
 6b0:	cf 93       	push	r28
 6b2:	00 d0       	rcall	.+0      	; 0x6b4 <filterFIRDecim+0x12>
 6b4:	cd b7       	in	r28, 0x3d	; 61
 6b6:	de b7       	in	r29, 0x3e	; 62

	PORTC |= (1<<PC2);
 6b8:	42 9a       	sbi	0x08, 2	; 8
	int16_t val;
	uint16_t a = filterFIR();
 6ba:	0e 94 ea 02 	call	0x5d4	; 0x5d4 <filterFIR>
 6be:	d8 2e       	mov	r13, r24
 6c0:	c9 2e       	mov	r12, r25
	fifoPopWord(&filtInBuf, &val);
 6c2:	58 e6       	ldi	r21, 0x68	; 104
 6c4:	e5 2e       	mov	r14, r21
 6c6:	55 e0       	ldi	r21, 0x05	; 5
 6c8:	f5 2e       	mov	r15, r21
 6ca:	c7 01       	movw	r24, r14
 6cc:	8e 01       	movw	r16, r28
 6ce:	0f 5f       	subi	r16, 0xFF	; 255
 6d0:	1f 4f       	sbci	r17, 0xFF	; 255
 6d2:	b8 01       	movw	r22, r16
 6d4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <fifoPopWord>
    fifoPopWord(&filtInBuf, &val);
 6d8:	c7 01       	movw	r24, r14
 6da:	b8 01       	movw	r22, r16
 6dc:	0e 94 78 04 	call	0x8f0	; 0x8f0 <fifoPopWord>
	fifoPopWord(&filtInBuf, &val);
 6e0:	c7 01       	movw	r24, r14
 6e2:	b8 01       	movw	r22, r16
 6e4:	0e 94 78 04 	call	0x8f0	; 0x8f0 <fifoPopWord>
	fifoPopWord(&filtInBuf, &val);
 6e8:	c7 01       	movw	r24, r14
 6ea:	b8 01       	movw	r22, r16
 6ec:	0e 94 78 04 	call	0x8f0	; 0x8f0 <fifoPopWord>
	PORTC &= ~(1<<PC2);
 6f0:	42 98       	cbi	0x08, 2	; 8
	//_delay_ms(20);
	return a;
}
 6f2:	8d 2d       	mov	r24, r13
 6f4:	9c 2d       	mov	r25, r12
 6f6:	0f 90       	pop	r0
 6f8:	0f 90       	pop	r0
 6fa:	cf 91       	pop	r28
 6fc:	df 91       	pop	r29
 6fe:	1f 91       	pop	r17
 700:	0f 91       	pop	r16
 702:	ff 90       	pop	r15
 704:	ef 90       	pop	r14
 706:	df 90       	pop	r13
 708:	cf 90       	pop	r12
 70a:	08 95       	ret

0000070c <filterInit>:
decimState_t decimation;

/*** FUNCTIONS ***/
void filterInit() {
	//initialise In- and Outputbuffer
	fifoInit(&filtInBuf,  (uint8_t*)filtInBufMem,2*(FILTER_IN_BUF_MASK));
 70c:	88 e6       	ldi	r24, 0x68	; 104
 70e:	95 e0       	ldi	r25, 0x05	; 5
 710:	62 e7       	ldi	r22, 0x72	; 114
 712:	75 e0       	ldi	r23, 0x05	; 5
 714:	40 e0       	ldi	r20, 0x00	; 0
 716:	50 e1       	ldi	r21, 0x10	; 16
 718:	0e 94 8f 03 	call	0x71e	; 0x71e <fifoInit>
}
 71c:	08 95       	ret

0000071e <fifoInit>:
#include <avr/interrupt.h>
#include <util/atomic.h>

/*** FUNCTIONS ***/

void fifoInit(volatile fifo_t* pFifo, uint8_t* pdata, uint16_t mask) {
 71e:	fc 01       	movw	r30, r24

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 720:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 722:	f8 94       	cli
		pFifo->data		= pdata;
 724:	71 83       	std	Z+1, r23	; 0x01
 726:	60 83       	st	Z, r22
		pFifo->iStart	= 0;
 728:	13 82       	std	Z+3, r1	; 0x03
 72a:	12 82       	std	Z+2, r1	; 0x02
		pFifo->iEnd		= 0;
 72c:	15 82       	std	Z+5, r1	; 0x05
 72e:	14 82       	std	Z+4, r1	; 0x04
		pFifo->bytes	= 0;
 730:	17 82       	std	Z+7, r1	; 0x07
 732:	16 82       	std	Z+6, r1	; 0x06
		pFifo->mask		= mask;
 734:	51 87       	std	Z+9, r21	; 0x09
 736:	40 87       	std	Z+8, r20	; 0x08
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 738:	8f bf       	out	0x3f, r24	; 63
	}
}
 73a:	08 95       	ret

0000073c <fifoClear>:

void fifoClear(volatile fifo_t* pFifo) {
 73c:	fc 01       	movw	r30, r24

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 73e:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 740:	f8 94       	cli
		pFifo->iStart	= 0;
 742:	13 82       	std	Z+3, r1	; 0x03
 744:	12 82       	std	Z+2, r1	; 0x02
		pFifo->iEnd		= 0;
 746:	15 82       	std	Z+5, r1	; 0x05
 748:	14 82       	std	Z+4, r1	; 0x04
		pFifo->bytes	= 0;
 74a:	17 82       	std	Z+7, r1	; 0x07
 74c:	16 82       	std	Z+6, r1	; 0x06
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 74e:	8f bf       	out	0x3f, r24	; 63
	}
}
 750:	08 95       	ret

00000752 <fifoPushByte>:

uint8_t fifoPushByte(volatile fifo_t* pFifo, uint8_t data) {
 752:	dc 01       	movw	r26, r24
	uint8_t retCode = 0;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 754:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 756:	f8 94       	cli
		if(pFifo->bytes < pFifo->mask) {
 758:	16 96       	adiw	r26, 0x06	; 6
 75a:	2d 91       	ld	r18, X+
 75c:	3c 91       	ld	r19, X
 75e:	17 97       	sbiw	r26, 0x07	; 7
 760:	18 96       	adiw	r26, 0x08	; 8
 762:	8d 91       	ld	r24, X+
 764:	9c 91       	ld	r25, X
 766:	19 97       	sbiw	r26, 0x09	; 9
 768:	28 17       	cp	r18, r24
 76a:	39 07       	cpc	r19, r25
 76c:	10 f0       	brcs	.+4      	; 0x772 <fifoPushByte+0x20>
 76e:	81 e0       	ldi	r24, 0x01	; 1
 770:	25 c0       	rjmp	.+74     	; 0x7bc <fifoPushByte+0x6a>
			pFifo->data[pFifo->iEnd] = data;					// write data to buffer
 772:	ed 91       	ld	r30, X+
 774:	fc 91       	ld	r31, X
 776:	11 97       	sbiw	r26, 0x01	; 1
 778:	14 96       	adiw	r26, 0x04	; 4
 77a:	8d 91       	ld	r24, X+
 77c:	9c 91       	ld	r25, X
 77e:	15 97       	sbiw	r26, 0x05	; 5
 780:	e8 0f       	add	r30, r24
 782:	f9 1f       	adc	r31, r25
 784:	60 83       	st	Z, r22
			pFifo->iEnd = (pFifo->iEnd+1) & (pFifo->mask-1);	// increment buffer-end-index
 786:	14 96       	adiw	r26, 0x04	; 4
 788:	2d 91       	ld	r18, X+
 78a:	3c 91       	ld	r19, X
 78c:	15 97       	sbiw	r26, 0x05	; 5
 78e:	18 96       	adiw	r26, 0x08	; 8
 790:	8d 91       	ld	r24, X+
 792:	9c 91       	ld	r25, X
 794:	19 97       	sbiw	r26, 0x09	; 9
 796:	01 97       	sbiw	r24, 0x01	; 1
 798:	2f 5f       	subi	r18, 0xFF	; 255
 79a:	3f 4f       	sbci	r19, 0xFF	; 255
 79c:	82 23       	and	r24, r18
 79e:	93 23       	and	r25, r19
 7a0:	15 96       	adiw	r26, 0x05	; 5
 7a2:	9c 93       	st	X, r25
 7a4:	8e 93       	st	-X, r24
 7a6:	14 97       	sbiw	r26, 0x04	; 4
			pFifo->bytes++; 									// increment number of bytes in buffer
 7a8:	16 96       	adiw	r26, 0x06	; 6
 7aa:	8d 91       	ld	r24, X+
 7ac:	9c 91       	ld	r25, X
 7ae:	17 97       	sbiw	r26, 0x07	; 7
 7b0:	01 96       	adiw	r24, 0x01	; 1
 7b2:	17 96       	adiw	r26, 0x07	; 7
 7b4:	9c 93       	st	X, r25
 7b6:	8e 93       	st	-X, r24
 7b8:	16 97       	sbiw	r26, 0x06	; 6
 7ba:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 7bc:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}

	return retCode;
}
 7be:	08 95       	ret

000007c0 <fifoPushWord>:

uint8_t fifoPushWord(volatile fifo_t* pFifo, int16_t data) {
 7c0:	df 93       	push	r29
 7c2:	cf 93       	push	r28
 7c4:	00 d0       	rcall	.+0      	; 0x7c6 <fifoPushWord+0x6>
 7c6:	cd b7       	in	r28, 0x3d	; 61
 7c8:	de b7       	in	r29, 0x3e	; 62
 7ca:	dc 01       	movw	r26, r24
 7cc:	7a 83       	std	Y+2, r23	; 0x02
 7ce:	69 83       	std	Y+1, r22	; 0x01
	uint8_t retCode = 0;
	uint8_t* pdata = (uint8_t*)&data;
	int i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 7d0:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 7d2:	f8 94       	cli
		if(pFifo->bytes < (pFifo->mask-1)) {
 7d4:	16 96       	adiw	r26, 0x06	; 6
 7d6:	2d 91       	ld	r18, X+
 7d8:	3c 91       	ld	r19, X
 7da:	17 97       	sbiw	r26, 0x07	; 7
 7dc:	18 96       	adiw	r26, 0x08	; 8
 7de:	8d 91       	ld	r24, X+
 7e0:	9c 91       	ld	r25, X
 7e2:	19 97       	sbiw	r26, 0x09	; 9
 7e4:	01 97       	sbiw	r24, 0x01	; 1
 7e6:	28 17       	cp	r18, r24
 7e8:	39 07       	cpc	r19, r25
 7ea:	10 f0       	brcs	.+4      	; 0x7f0 <fifoPushWord+0x30>
 7ec:	81 e0       	ldi	r24, 0x01	; 1
 7ee:	42 c0       	rjmp	.+132    	; 0x874 <fifoPushWord+0xb4>
			for(i=0; i<2; i++) {
				pFifo->data[pFifo->iEnd] = *pdata;					// write data to buffer
 7f0:	ed 91       	ld	r30, X+
 7f2:	fc 91       	ld	r31, X
 7f4:	11 97       	sbiw	r26, 0x01	; 1
 7f6:	14 96       	adiw	r26, 0x04	; 4
 7f8:	8d 91       	ld	r24, X+
 7fa:	9c 91       	ld	r25, X
 7fc:	15 97       	sbiw	r26, 0x05	; 5
 7fe:	e8 0f       	add	r30, r24
 800:	f9 1f       	adc	r31, r25
 802:	89 81       	ldd	r24, Y+1	; 0x01
 804:	80 83       	st	Z, r24
				pFifo->iEnd = (pFifo->iEnd+1) & (pFifo->mask-1);	// increment buffer end index
 806:	14 96       	adiw	r26, 0x04	; 4
 808:	2d 91       	ld	r18, X+
 80a:	3c 91       	ld	r19, X
 80c:	15 97       	sbiw	r26, 0x05	; 5
 80e:	18 96       	adiw	r26, 0x08	; 8
 810:	8d 91       	ld	r24, X+
 812:	9c 91       	ld	r25, X
 814:	19 97       	sbiw	r26, 0x09	; 9
 816:	01 97       	sbiw	r24, 0x01	; 1
 818:	2f 5f       	subi	r18, 0xFF	; 255
 81a:	3f 4f       	sbci	r19, 0xFF	; 255
 81c:	82 23       	and	r24, r18
 81e:	93 23       	and	r25, r19
 820:	15 96       	adiw	r26, 0x05	; 5
 822:	9c 93       	st	X, r25
 824:	8e 93       	st	-X, r24
 826:	14 97       	sbiw	r26, 0x04	; 4
	int i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if(pFifo->bytes < (pFifo->mask-1)) {
			for(i=0; i<2; i++) {
				pFifo->data[pFifo->iEnd] = *pdata;					// write data to buffer
 828:	ed 91       	ld	r30, X+
 82a:	fc 91       	ld	r31, X
 82c:	11 97       	sbiw	r26, 0x01	; 1
 82e:	14 96       	adiw	r26, 0x04	; 4
 830:	8d 91       	ld	r24, X+
 832:	9c 91       	ld	r25, X
 834:	15 97       	sbiw	r26, 0x05	; 5
 836:	e8 0f       	add	r30, r24
 838:	f9 1f       	adc	r31, r25
 83a:	8a 81       	ldd	r24, Y+2	; 0x02
 83c:	80 83       	st	Z, r24
				pFifo->iEnd = (pFifo->iEnd+1) & (pFifo->mask-1);	// increment buffer end index
 83e:	14 96       	adiw	r26, 0x04	; 4
 840:	2d 91       	ld	r18, X+
 842:	3c 91       	ld	r19, X
 844:	15 97       	sbiw	r26, 0x05	; 5
 846:	18 96       	adiw	r26, 0x08	; 8
 848:	8d 91       	ld	r24, X+
 84a:	9c 91       	ld	r25, X
 84c:	19 97       	sbiw	r26, 0x09	; 9
 84e:	01 97       	sbiw	r24, 0x01	; 1
 850:	2f 5f       	subi	r18, 0xFF	; 255
 852:	3f 4f       	sbci	r19, 0xFF	; 255
 854:	82 23       	and	r24, r18
 856:	93 23       	and	r25, r19
 858:	15 96       	adiw	r26, 0x05	; 5
 85a:	9c 93       	st	X, r25
 85c:	8e 93       	st	-X, r24
 85e:	14 97       	sbiw	r26, 0x04	; 4
				pdata++;
			} 
			pFifo->bytes += 2;	// increment number of bytes in buffer
 860:	16 96       	adiw	r26, 0x06	; 6
 862:	8d 91       	ld	r24, X+
 864:	9c 91       	ld	r25, X
 866:	17 97       	sbiw	r26, 0x07	; 7
 868:	02 96       	adiw	r24, 0x02	; 2
 86a:	17 96       	adiw	r26, 0x07	; 7
 86c:	9c 93       	st	X, r25
 86e:	8e 93       	st	-X, r24
 870:	16 97       	sbiw	r26, 0x06	; 6
 872:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 874:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}

	return retCode;
}
 876:	0f 90       	pop	r0
 878:	0f 90       	pop	r0
 87a:	cf 91       	pop	r28
 87c:	df 91       	pop	r29
 87e:	08 95       	ret

00000880 <fifoPopByte>:

uint8_t fifoPopByte(volatile fifo_t* pFifo, uint8_t* pdata) {
 880:	cf 93       	push	r28
 882:	df 93       	push	r29
 884:	dc 01       	movw	r26, r24
 886:	eb 01       	movw	r28, r22
	uint8_t retCode = 0;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 888:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 88a:	f8 94       	cli
		if(pFifo->bytes>0) {
 88c:	16 96       	adiw	r26, 0x06	; 6
 88e:	8d 91       	ld	r24, X+
 890:	9c 91       	ld	r25, X
 892:	17 97       	sbiw	r26, 0x07	; 7
 894:	89 2b       	or	r24, r25
 896:	11 f4       	brne	.+4      	; 0x89c <fifoPopByte+0x1c>
 898:	81 e0       	ldi	r24, 0x01	; 1
 89a:	26 c0       	rjmp	.+76     	; 0x8e8 <fifoPopByte+0x68>
			*pdata = pFifo->data[pFifo->iStart];					// read data from buffer
 89c:	ed 91       	ld	r30, X+
 89e:	fc 91       	ld	r31, X
 8a0:	11 97       	sbiw	r26, 0x01	; 1
 8a2:	12 96       	adiw	r26, 0x02	; 2
 8a4:	8d 91       	ld	r24, X+
 8a6:	9c 91       	ld	r25, X
 8a8:	13 97       	sbiw	r26, 0x03	; 3
 8aa:	e8 0f       	add	r30, r24
 8ac:	f9 1f       	adc	r31, r25
 8ae:	80 81       	ld	r24, Z
 8b0:	88 83       	st	Y, r24
			pFifo->iStart = (pFifo->iStart+1) & (pFifo->mask-1);	// increment buffer start index
 8b2:	12 96       	adiw	r26, 0x02	; 2
 8b4:	2d 91       	ld	r18, X+
 8b6:	3c 91       	ld	r19, X
 8b8:	13 97       	sbiw	r26, 0x03	; 3
 8ba:	18 96       	adiw	r26, 0x08	; 8
 8bc:	8d 91       	ld	r24, X+
 8be:	9c 91       	ld	r25, X
 8c0:	19 97       	sbiw	r26, 0x09	; 9
 8c2:	01 97       	sbiw	r24, 0x01	; 1
 8c4:	2f 5f       	subi	r18, 0xFF	; 255
 8c6:	3f 4f       	sbci	r19, 0xFF	; 255
 8c8:	82 23       	and	r24, r18
 8ca:	93 23       	and	r25, r19
 8cc:	13 96       	adiw	r26, 0x03	; 3
 8ce:	9c 93       	st	X, r25
 8d0:	8e 93       	st	-X, r24
 8d2:	12 97       	sbiw	r26, 0x02	; 2
			pFifo->bytes--;											// decrement number of bytes in buffer
 8d4:	16 96       	adiw	r26, 0x06	; 6
 8d6:	8d 91       	ld	r24, X+
 8d8:	9c 91       	ld	r25, X
 8da:	17 97       	sbiw	r26, 0x07	; 7
 8dc:	01 97       	sbiw	r24, 0x01	; 1
 8de:	17 96       	adiw	r26, 0x07	; 7
 8e0:	9c 93       	st	X, r25
 8e2:	8e 93       	st	-X, r24
 8e4:	16 97       	sbiw	r26, 0x06	; 6
 8e6:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 8e8:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}
	
	return retCode;
}
 8ea:	df 91       	pop	r29
 8ec:	cf 91       	pop	r28
 8ee:	08 95       	ret

000008f0 <fifoPopWord>:

uint8_t fifoPopWord(volatile fifo_t* pFifo, int16_t* pdata) {
 8f0:	cf 93       	push	r28
 8f2:	df 93       	push	r29
 8f4:	ec 01       	movw	r28, r24
	uint8_t retCode = 0;
	uint8_t*  pd = (uint8_t*)pdata;
	int i;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 8f6:	4f b7       	in	r20, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 8f8:	f8 94       	cli
		if(pFifo->bytes>1) {
 8fa:	8e 81       	ldd	r24, Y+6	; 0x06
 8fc:	9f 81       	ldd	r25, Y+7	; 0x07
 8fe:	02 97       	sbiw	r24, 0x02	; 2
 900:	10 f4       	brcc	.+4      	; 0x906 <fifoPopWord+0x16>
 902:	81 e0       	ldi	r24, 0x01	; 1
 904:	2e c0       	rjmp	.+92     	; 0x962 <fifoPopWord+0x72>
	return retCode;
}

uint8_t fifoPopWord(volatile fifo_t* pFifo, int16_t* pdata) {
	uint8_t retCode = 0;
	uint8_t*  pd = (uint8_t*)pdata;
 906:	db 01       	movw	r26, r22
	int i;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if(pFifo->bytes>1) {
			for(i=0; i<2; i++) {
				*pd = pFifo->data[pFifo->iStart];						// read data from buffer
 908:	e8 81       	ld	r30, Y
 90a:	f9 81       	ldd	r31, Y+1	; 0x01
 90c:	8a 81       	ldd	r24, Y+2	; 0x02
 90e:	9b 81       	ldd	r25, Y+3	; 0x03
 910:	e8 0f       	add	r30, r24
 912:	f9 1f       	adc	r31, r25
 914:	80 81       	ld	r24, Z
 916:	8c 93       	st	X, r24
				pFifo->iStart = (pFifo->iStart+1) & (pFifo->mask-1);	// increment buffer start index
 918:	2a 81       	ldd	r18, Y+2	; 0x02
 91a:	3b 81       	ldd	r19, Y+3	; 0x03
 91c:	88 85       	ldd	r24, Y+8	; 0x08
 91e:	99 85       	ldd	r25, Y+9	; 0x09
 920:	01 97       	sbiw	r24, 0x01	; 1
 922:	2f 5f       	subi	r18, 0xFF	; 255
 924:	3f 4f       	sbci	r19, 0xFF	; 255
 926:	82 23       	and	r24, r18
 928:	93 23       	and	r25, r19
 92a:	9b 83       	std	Y+3, r25	; 0x03
 92c:	8a 83       	std	Y+2, r24	; 0x02
	int i;
	
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
		if(pFifo->bytes>1) {
			for(i=0; i<2; i++) {
				*pd = pFifo->data[pFifo->iStart];						// read data from buffer
 92e:	e8 81       	ld	r30, Y
 930:	f9 81       	ldd	r31, Y+1	; 0x01
 932:	8a 81       	ldd	r24, Y+2	; 0x02
 934:	9b 81       	ldd	r25, Y+3	; 0x03
 936:	e8 0f       	add	r30, r24
 938:	f9 1f       	adc	r31, r25
 93a:	80 81       	ld	r24, Z
 93c:	11 96       	adiw	r26, 0x01	; 1
 93e:	8c 93       	st	X, r24
				pFifo->iStart = (pFifo->iStart+1) & (pFifo->mask-1);	// increment buffer start index
 940:	2a 81       	ldd	r18, Y+2	; 0x02
 942:	3b 81       	ldd	r19, Y+3	; 0x03
 944:	88 85       	ldd	r24, Y+8	; 0x08
 946:	99 85       	ldd	r25, Y+9	; 0x09
 948:	01 97       	sbiw	r24, 0x01	; 1
 94a:	2f 5f       	subi	r18, 0xFF	; 255
 94c:	3f 4f       	sbci	r19, 0xFF	; 255
 94e:	82 23       	and	r24, r18
 950:	93 23       	and	r25, r19
 952:	9b 83       	std	Y+3, r25	; 0x03
 954:	8a 83       	std	Y+2, r24	; 0x02
				pd++;
			}
			pFifo->bytes -= 2;											// decrement number of bytes in buffer
 956:	8e 81       	ldd	r24, Y+6	; 0x06
 958:	9f 81       	ldd	r25, Y+7	; 0x07
 95a:	02 97       	sbiw	r24, 0x02	; 2
 95c:	9f 83       	std	Y+7, r25	; 0x07
 95e:	8e 83       	std	Y+6, r24	; 0x06
 960:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 962:	4f bf       	out	0x3f, r20	; 63
			retCode = 1;
		}
	}

	return retCode;
}
 964:	df 91       	pop	r29
 966:	cf 91       	pop	r28
 968:	08 95       	ret

0000096a <fifoReadWord>:

uint8_t fifoReadWord(volatile fifo_t* pFifo, uint16_t n, int16_t* pdata) {
 96a:	1f 93       	push	r17
 96c:	cf 93       	push	r28
 96e:	df 93       	push	r29
 970:	ec 01       	movw	r28, r24
	uint8_t retCode = 0;
	uint8_t*  pd	= (uint8_t*)pdata;
	int i;

	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 972:	1f b7       	in	r17, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 974:	f8 94       	cli
		if(pFifo->bytes < (2*n)) {	// if no n elements are in the buffer
 976:	8e 81       	ldd	r24, Y+6	; 0x06
 978:	9f 81       	ldd	r25, Y+7	; 0x07
 97a:	66 0f       	add	r22, r22
 97c:	77 1f       	adc	r23, r23
 97e:	86 17       	cp	r24, r22
 980:	97 07       	cpc	r25, r23
 982:	10 f4       	brcc	.+4      	; 0x988 <fifoReadWord+0x1e>
 984:	81 e0       	ldi	r24, 0x01	; 1
 986:	23 c0       	rjmp	.+70     	; 0x9ce <fifoReadWord+0x64>
	return retCode;
}

uint8_t fifoReadWord(volatile fifo_t* pFifo, uint16_t n, int16_t* pdata) {
	uint8_t retCode = 0;
	uint8_t*  pd	= (uint8_t*)pdata;
 988:	da 01       	movw	r26, r20
		if(pFifo->bytes < (2*n)) {	// if no n elements are in the buffer
			retCode = 1;
		}
		else {
			for(i=0; i<2; i++) {
				*pd = pFifo->data[(pFifo->iStart+2*n+i) & (pFifo->mask-1)];	// read data
 98a:	e8 81       	ld	r30, Y
 98c:	f9 81       	ldd	r31, Y+1	; 0x01
 98e:	2a 81       	ldd	r18, Y+2	; 0x02
 990:	3b 81       	ldd	r19, Y+3	; 0x03
 992:	88 85       	ldd	r24, Y+8	; 0x08
 994:	99 85       	ldd	r25, Y+9	; 0x09
 996:	26 0f       	add	r18, r22
 998:	37 1f       	adc	r19, r23
 99a:	01 97       	sbiw	r24, 0x01	; 1
 99c:	28 23       	and	r18, r24
 99e:	39 23       	and	r19, r25
 9a0:	e2 0f       	add	r30, r18
 9a2:	f3 1f       	adc	r31, r19
 9a4:	80 81       	ld	r24, Z
 9a6:	8c 93       	st	X, r24
 9a8:	e8 81       	ld	r30, Y
 9aa:	f9 81       	ldd	r31, Y+1	; 0x01
 9ac:	8a 81       	ldd	r24, Y+2	; 0x02
 9ae:	9b 81       	ldd	r25, Y+3	; 0x03
 9b0:	28 85       	ldd	r18, Y+8	; 0x08
 9b2:	39 85       	ldd	r19, Y+9	; 0x09
 9b4:	01 96       	adiw	r24, 0x01	; 1
 9b6:	86 0f       	add	r24, r22
 9b8:	97 1f       	adc	r25, r23
 9ba:	21 50       	subi	r18, 0x01	; 1
 9bc:	30 40       	sbci	r19, 0x00	; 0
 9be:	82 23       	and	r24, r18
 9c0:	93 23       	and	r25, r19
 9c2:	e8 0f       	add	r30, r24
 9c4:	f9 1f       	adc	r31, r25
 9c6:	80 81       	ld	r24, Z
 9c8:	11 96       	adiw	r26, 0x01	; 1
 9ca:	8c 93       	st	X, r24
 9cc:	80 e0       	ldi	r24, 0x00	; 0
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 9ce:	1f bf       	out	0x3f, r17	; 63
			retCode = 0;
		}
	}

	return retCode;
}
 9d0:	df 91       	pop	r29
 9d2:	cf 91       	pop	r28
 9d4:	1f 91       	pop	r17
 9d6:	08 95       	ret

000009d8 <fifoBytes>:

uint16_t fifoBytes(volatile fifo_t* pFifo) {
 9d8:	fc 01       	movw	r30, r24
	uint16_t val = 0;
	ATOMIC_BLOCK(ATOMIC_RESTORESTATE) {
 9da:	8f b7       	in	r24, 0x3f	; 63
    return 1;
}

static __inline__ uint8_t __iCliRetVal(void)
{
    cli();
 9dc:	f8 94       	cli
		val = pFifo->bytes;
 9de:	26 81       	ldd	r18, Z+6	; 0x06
 9e0:	37 81       	ldd	r19, Z+7	; 0x07
    (void)__s;
}

static __inline__ void __iRestore(const  uint8_t *__s)
{
    SREG = *__s;
 9e2:	8f bf       	out	0x3f, r24	; 63
	}
	return val;
}
 9e4:	c9 01       	movw	r24, r18
 9e6:	08 95       	ret

000009e8 <__vector_17>:
volatile static int16_t trigLev;	/// trigger-Level
volatile static int16_t prevVal;	/// value acquired previously


/*** INTERRUPT ROUTINES ***/
ISR(TIMER1_COMPA_vect) {
 9e8:	1f 92       	push	r1
 9ea:	0f 92       	push	r0
 9ec:	0f b6       	in	r0, 0x3f	; 63
 9ee:	0f 92       	push	r0
 9f0:	11 24       	eor	r1, r1
}
 9f2:	0f 90       	pop	r0
 9f4:	0f be       	out	0x3f, r0	; 63
 9f6:	0f 90       	pop	r0
 9f8:	1f 90       	pop	r1
 9fa:	18 95       	reti

000009fc <__vector_18>:

ISR(TIMER1_COMPB_vect) { 
 9fc:	1f 92       	push	r1
 9fe:	0f 92       	push	r0
 a00:	0f b6       	in	r0, 0x3f	; 63
 a02:	0f 92       	push	r0
 a04:	11 24       	eor	r1, r1
}
 a06:	0f 90       	pop	r0
 a08:	0f be       	out	0x3f, r0	; 63
 a0a:	0f 90       	pop	r0
 a0c:	1f 90       	pop	r1
 a0e:	18 95       	reti

00000a10 <adcInit>:
	prevVal = wert;
}

/*** FUNCTIONS ***/
void adcInit() {
	toSample = 0;
 a10:	10 92 72 15 	sts	0x1572, r1
 a14:	10 92 73 15 	sts	0x1573, r1
 a18:	10 92 74 15 	sts	0x1574, r1
 a1c:	10 92 75 15 	sts	0x1575, r1

	// use internal 2,56 V reference, Input=Single_Ended, Channel=ADC0
	#if defined (__AVR_ATmega1281__)
		ADMUX   = (1<<REFS1) | (1<<REFS0); 	
 a20:	80 ec       	ldi	r24, 0xC0	; 192
 a22:	80 93 7c 00 	sts	0x007C, r24

	#if F_CPU==14745600UL
		ADCSRA  = (1<<ADATE) | (1<<ADPS2) | (1<<ADPS1);
		// turn on Auto-Trigger and ADC-Interrupt, F_ADC = F_CPU/64;
	#elif F_CPU==7372800UL
		ADCSRA  = (1<<ADATE) | (1<<ADPS2) | (1<<ADPS0);
 a26:	ea e7       	ldi	r30, 0x7A	; 122
 a28:	f0 e0       	ldi	r31, 0x00	; 0
 a2a:	85 e2       	ldi	r24, 0x25	; 37
 a2c:	80 83       	st	Z, r24
		// turn on Auto-Trigger and ADC-Interrupt, F_ADC = F_CPU/32;
	#else
		#warning "Program not specified for this frequency. Problems may occur"
	#endif
	ADCSRB  = (1<<ADTS2) | (1<<ADTS0); 	// Conversion is triggered by Compare-Match B of Timer1
 a2e:	85 e0       	ldi	r24, 0x05	; 5
 a30:	80 93 7b 00 	sts	0x007B, r24
	DIDR0   = (1<<ADC0D);			  	// disable digital Buffer of ADC0
 a34:	81 e0       	ldi	r24, 0x01	; 1
 a36:	80 93 7e 00 	sts	0x007E, r24
	ADCSRA |= (1<<ADEN);				// enable ADC
 a3a:	80 81       	ld	r24, Z
 a3c:	80 68       	ori	r24, 0x80	; 128
 a3e:	80 83       	st	Z, r24

	// turn on Timer1 
	TCCR1B = 0;	
 a40:	10 92 81 00 	sts	0x0081, r1
}
 a44:	08 95       	ret

00000a46 <adcStart>:

void adcStart(uint16_t sampleRateCode, uint32_t sampleCount, trigger_t triggerMode, int16_t triggerLevel) {
 a46:	0f 93       	push	r16
 a48:	1f 93       	push	r17
 a4a:	fc 01       	movw	r30, r24
	cli();	// disable Interrupts globally
 a4c:	f8 94       	cli

	// save number of samples
	toSample = sampleCount;
 a4e:	40 93 72 15 	sts	0x1572, r20
 a52:	50 93 73 15 	sts	0x1573, r21
 a56:	60 93 74 15 	sts	0x1574, r22
 a5a:	70 93 75 15 	sts	0x1575, r23

	// initialize trigger logic
	trigMode = triggerMode;
 a5e:	20 93 76 15 	sts	0x1576, r18
	trigLev  = triggerLevel;
 a62:	10 93 79 15 	sts	0x1579, r17
 a66:	00 93 78 15 	sts	0x1578, r16

	switch(trigMode) {
 a6a:	80 91 76 15 	lds	r24, 0x1576
 a6e:	81 30       	cpi	r24, 0x01	; 1
 a70:	19 f0       	breq	.+6      	; 0xa78 <adcStart+0x32>
 a72:	82 30       	cpi	r24, 0x02	; 2
 a74:	81 f4       	brne	.+32     	; 0xa96 <adcStart+0x50>
 a76:	05 c0       	rjmp	.+10     	; 0xa82 <adcStart+0x3c>
		case RISING:
			waitingForTrig = 1;
 a78:	80 93 77 15 	sts	0x1577, r24
			prevVal = INT16_MAX;
 a7c:	8f ef       	ldi	r24, 0xFF	; 255
 a7e:	9f e7       	ldi	r25, 0x7F	; 127
 a80:	05 c0       	rjmp	.+10     	; 0xa8c <adcStart+0x46>
			break;
		case FALLING:
			waitingForTrig = 1;
 a82:	81 e0       	ldi	r24, 0x01	; 1
 a84:	80 93 77 15 	sts	0x1577, r24
			prevVal = INT16_MIN;
 a88:	80 e0       	ldi	r24, 0x00	; 0
 a8a:	90 e8       	ldi	r25, 0x80	; 128
 a8c:	90 93 7b 15 	sts	0x157B, r25
 a90:	80 93 7a 15 	sts	0x157A, r24
 a94:	06 c0       	rjmp	.+12     	; 0xaa2 <adcStart+0x5c>
			break;
		case NONE:
		default:
			waitingForTrig = 0;
 a96:	10 92 77 15 	sts	0x1577, r1
			prevVal = 0;
 a9a:	10 92 7b 15 	sts	0x157B, r1
 a9e:	10 92 7a 15 	sts	0x157A, r1
	}

	// initialize Timer1
	OCR1A	 = sampleRateCode;
 aa2:	f0 93 89 00 	sts	0x0089, r31
 aa6:	e0 93 88 00 	sts	0x0088, r30
	OCR1B  	 = sampleRateCode>>2;
 aaa:	f6 95       	lsr	r31
 aac:	e7 95       	ror	r30
 aae:	f6 95       	lsr	r31
 ab0:	e7 95       	ror	r30
 ab2:	f0 93 8b 00 	sts	0x008B, r31
 ab6:	e0 93 8a 00 	sts	0x008A, r30
	TCNT1  	 = 0;
 aba:	10 92 85 00 	sts	0x0085, r1
 abe:	10 92 84 00 	sts	0x0084, r1
	TIMSK1   = (1<<OCIE1A) | (1<<OCIE1B); // enable Timer-Output-Compare-Interrupt
 ac2:	86 e0       	ldi	r24, 0x06	; 6
 ac4:	80 93 6f 00 	sts	0x006F, r24
	TCCR1A   = 0; 						 
 ac8:	10 92 80 00 	sts	0x0080, r1
	TCCR1B   = (1<<WGM12) | (1<<CS10); 	  // disable Input/Capture, CTC-Mode, Timer-Clock = F_CPU
 acc:	89 e0       	ldi	r24, 0x09	; 9
 ace:	80 93 81 00 	sts	0x0081, r24

	// enable ADC-Interrupt
	ADCSRA  |= (1<<ADIE);
 ad2:	80 91 7a 00 	lds	r24, 0x007A
 ad6:	88 60       	ori	r24, 0x08	; 8
 ad8:	80 93 7a 00 	sts	0x007A, r24

	// enable Interrupts globally
	sei();
 adc:	78 94       	sei
}
 ade:	1f 91       	pop	r17
 ae0:	0f 91       	pop	r16
 ae2:	08 95       	ret

00000ae4 <adcIsRunning>:

uint8_t adcIsRunning() {
	uint8_t isRunning = 0;

	if(toSample > 0)
 ae4:	80 91 72 15 	lds	r24, 0x1572
 ae8:	90 91 73 15 	lds	r25, 0x1573
 aec:	a0 91 74 15 	lds	r26, 0x1574
 af0:	b0 91 75 15 	lds	r27, 0x1575
 af4:	20 e0       	ldi	r18, 0x00	; 0
 af6:	00 97       	sbiw	r24, 0x00	; 0
 af8:	a1 05       	cpc	r26, r1
 afa:	b1 05       	cpc	r27, r1
 afc:	09 f0       	breq	.+2      	; 0xb00 <adcIsRunning+0x1c>
 afe:	21 e0       	ldi	r18, 0x01	; 1
		isRunning = 1;
	else
		isRunning = 0;

	return isRunning;
}
 b00:	82 2f       	mov	r24, r18
 b02:	08 95       	ret

00000b04 <__vector_29>:
 * \author Juergen Funck <juergen.funck@tu-berlin.de>
 * \date 2011-03-25
 * \brief Interrupt-Routine for the ADC-Interrupt. 
 *		  Gets called when an analog-to-digital conversion is complete
 */
ISR(ADC_vect) {
 b04:	1f 92       	push	r1
 b06:	0f 92       	push	r0
 b08:	0f b6       	in	r0, 0x3f	; 63
 b0a:	0f 92       	push	r0
 b0c:	0b b6       	in	r0, 0x3b	; 59
 b0e:	0f 92       	push	r0
 b10:	11 24       	eor	r1, r1
 b12:	2f 93       	push	r18
 b14:	3f 93       	push	r19
 b16:	4f 93       	push	r20
 b18:	5f 93       	push	r21
 b1a:	6f 93       	push	r22
 b1c:	7f 93       	push	r23
 b1e:	8f 93       	push	r24
 b20:	9f 93       	push	r25
 b22:	af 93       	push	r26
 b24:	bf 93       	push	r27
 b26:	cf 93       	push	r28
 b28:	df 93       	push	r29
 b2a:	ef 93       	push	r30
 b2c:	ff 93       	push	r31
	int16_t wert = ADC-ADC_OFFSET;	/// substract offset
 b2e:	c0 91 78 00 	lds	r28, 0x0078
 b32:	d0 91 79 00 	lds	r29, 0x0079
 b36:	c0 50       	subi	r28, 0x00	; 0
 b38:	d2 40       	sbci	r29, 0x02	; 2

	if(waitingForTrig==1) {         /// check for trigger condition
 b3a:	80 91 77 15 	lds	r24, 0x1577
 b3e:	81 30       	cpi	r24, 0x01	; 1
 b40:	89 f5       	brne	.+98     	; 0xba4 <__vector_29+0xa0>
		switch(trigMode) {
 b42:	80 91 76 15 	lds	r24, 0x1576
 b46:	81 30       	cpi	r24, 0x01	; 1
 b48:	19 f0       	breq	.+6      	; 0xb50 <__vector_29+0x4c>
 b4a:	82 30       	cpi	r24, 0x02	; 2
 b4c:	41 f5       	brne	.+80     	; 0xb9e <__vector_29+0x9a>
 b4e:	15 c0       	rjmp	.+42     	; 0xb7a <__vector_29+0x76>
			case RISING: 
				if((wert >= trigLev) && (prevVal < trigLev)) {
 b50:	80 91 78 15 	lds	r24, 0x1578
 b54:	90 91 79 15 	lds	r25, 0x1579
 b58:	c8 17       	cp	r28, r24
 b5a:	d9 07       	cpc	r29, r25
 b5c:	0c f4       	brge	.+2      	; 0xb60 <__vector_29+0x5c>
 b5e:	4b c0       	rjmp	.+150    	; 0xbf6 <__vector_29+0xf2>
 b60:	20 91 7a 15 	lds	r18, 0x157A
 b64:	30 91 7b 15 	lds	r19, 0x157B
 b68:	80 91 78 15 	lds	r24, 0x1578
 b6c:	90 91 79 15 	lds	r25, 0x1579
 b70:	28 17       	cp	r18, r24
 b72:	39 07       	cpc	r19, r25
 b74:	0c f0       	brlt	.+2      	; 0xb78 <__vector_29+0x74>
 b76:	3f c0       	rjmp	.+126    	; 0xbf6 <__vector_29+0xf2>
 b78:	12 c0       	rjmp	.+36     	; 0xb9e <__vector_29+0x9a>
					waitingForTrig = 0;
				}
				break;
			case FALLING:
				if((wert <= trigLev) && (prevVal > trigLev)) {
 b7a:	80 91 78 15 	lds	r24, 0x1578
 b7e:	90 91 79 15 	lds	r25, 0x1579
 b82:	8c 17       	cp	r24, r28
 b84:	9d 07       	cpc	r25, r29
 b86:	bc f1       	brlt	.+110    	; 0xbf6 <__vector_29+0xf2>
 b88:	20 91 7a 15 	lds	r18, 0x157A
 b8c:	30 91 7b 15 	lds	r19, 0x157B
 b90:	80 91 78 15 	lds	r24, 0x1578
 b94:	90 91 79 15 	lds	r25, 0x1579
 b98:	82 17       	cp	r24, r18
 b9a:	93 07       	cpc	r25, r19
 b9c:	64 f5       	brge	.+88     	; 0xbf6 <__vector_29+0xf2>
					waitingForTrig = 0;
				}
				break;
			case NONE:
			default:
				waitingForTrig = 0;
 b9e:	10 92 77 15 	sts	0x1577, r1
 ba2:	29 c0       	rjmp	.+82     	; 0xbf6 <__vector_29+0xf2>
		}
	}
	else {
		filterWrite2Buf((int16_t)wert);
 ba4:	ce 01       	movw	r24, r28
 ba6:	0e 94 c8 02 	call	0x590	; 0x590 <filterWrite2Buf>

		toSample--; // decrement the number of samples to be recorded
 baa:	80 91 72 15 	lds	r24, 0x1572
 bae:	90 91 73 15 	lds	r25, 0x1573
 bb2:	a0 91 74 15 	lds	r26, 0x1574
 bb6:	b0 91 75 15 	lds	r27, 0x1575
 bba:	01 97       	sbiw	r24, 0x01	; 1
 bbc:	a1 09       	sbc	r26, r1
 bbe:	b1 09       	sbc	r27, r1
 bc0:	80 93 72 15 	sts	0x1572, r24
 bc4:	90 93 73 15 	sts	0x1573, r25
 bc8:	a0 93 74 15 	sts	0x1574, r26
 bcc:	b0 93 75 15 	sts	0x1575, r27
		if(toSample == 0) {
 bd0:	80 91 72 15 	lds	r24, 0x1572
 bd4:	90 91 73 15 	lds	r25, 0x1573
 bd8:	a0 91 74 15 	lds	r26, 0x1574
 bdc:	b0 91 75 15 	lds	r27, 0x1575
 be0:	00 97       	sbiw	r24, 0x00	; 0
 be2:	a1 05       	cpc	r26, r1
 be4:	b1 05       	cpc	r27, r1
 be6:	39 f4       	brne	.+14     	; 0xbf6 <__vector_29+0xf2>
			TCCR1B  = 0; 			// turn timer off
 be8:	10 92 81 00 	sts	0x0081, r1
			ADCSRA  &= ~(1<<ADIE);	// disable ADC-Interrupt
 bec:	80 91 7a 00 	lds	r24, 0x007A
 bf0:	87 7f       	andi	r24, 0xF7	; 247
 bf2:	80 93 7a 00 	sts	0x007A, r24
		}
	}
	prevVal = wert;
 bf6:	d0 93 7b 15 	sts	0x157B, r29
 bfa:	c0 93 7a 15 	sts	0x157A, r28
}
 bfe:	ff 91       	pop	r31
 c00:	ef 91       	pop	r30
 c02:	df 91       	pop	r29
 c04:	cf 91       	pop	r28
 c06:	bf 91       	pop	r27
 c08:	af 91       	pop	r26
 c0a:	9f 91       	pop	r25
 c0c:	8f 91       	pop	r24
 c0e:	7f 91       	pop	r23
 c10:	6f 91       	pop	r22
 c12:	5f 91       	pop	r21
 c14:	4f 91       	pop	r20
 c16:	3f 91       	pop	r19
 c18:	2f 91       	pop	r18
 c1a:	0f 90       	pop	r0
 c1c:	0b be       	out	0x3b, r0	; 59
 c1e:	0f 90       	pop	r0
 c20:	0f be       	out	0x3f, r0	; 63
 c22:	0f 90       	pop	r0
 c24:	1f 90       	pop	r1
 c26:	18 95       	reti

00000c28 <__mulsi3>:
 c28:	62 9f       	mul	r22, r18
 c2a:	d0 01       	movw	r26, r0
 c2c:	73 9f       	mul	r23, r19
 c2e:	f0 01       	movw	r30, r0
 c30:	82 9f       	mul	r24, r18
 c32:	e0 0d       	add	r30, r0
 c34:	f1 1d       	adc	r31, r1
 c36:	64 9f       	mul	r22, r20
 c38:	e0 0d       	add	r30, r0
 c3a:	f1 1d       	adc	r31, r1
 c3c:	92 9f       	mul	r25, r18
 c3e:	f0 0d       	add	r31, r0
 c40:	83 9f       	mul	r24, r19
 c42:	f0 0d       	add	r31, r0
 c44:	74 9f       	mul	r23, r20
 c46:	f0 0d       	add	r31, r0
 c48:	65 9f       	mul	r22, r21
 c4a:	f0 0d       	add	r31, r0
 c4c:	99 27       	eor	r25, r25
 c4e:	72 9f       	mul	r23, r18
 c50:	b0 0d       	add	r27, r0
 c52:	e1 1d       	adc	r30, r1
 c54:	f9 1f       	adc	r31, r25
 c56:	63 9f       	mul	r22, r19
 c58:	b0 0d       	add	r27, r0
 c5a:	e1 1d       	adc	r30, r1
 c5c:	f9 1f       	adc	r31, r25
 c5e:	bd 01       	movw	r22, r26
 c60:	cf 01       	movw	r24, r30
 c62:	11 24       	eor	r1, r1
 c64:	08 95       	ret

00000c66 <atoi>:
 c66:	fc 01       	movw	r30, r24
 c68:	88 27       	eor	r24, r24
 c6a:	99 27       	eor	r25, r25
 c6c:	e8 94       	clt
 c6e:	21 91       	ld	r18, Z+
 c70:	20 32       	cpi	r18, 0x20	; 32
 c72:	e9 f3       	breq	.-6      	; 0xc6e <atoi+0x8>
 c74:	29 30       	cpi	r18, 0x09	; 9
 c76:	10 f0       	brcs	.+4      	; 0xc7c <atoi+0x16>
 c78:	2e 30       	cpi	r18, 0x0E	; 14
 c7a:	c8 f3       	brcs	.-14     	; 0xc6e <atoi+0x8>
 c7c:	2b 32       	cpi	r18, 0x2B	; 43
 c7e:	41 f0       	breq	.+16     	; 0xc90 <atoi+0x2a>
 c80:	2d 32       	cpi	r18, 0x2D	; 45
 c82:	39 f4       	brne	.+14     	; 0xc92 <atoi+0x2c>
 c84:	68 94       	set
 c86:	04 c0       	rjmp	.+8      	; 0xc90 <atoi+0x2a>
 c88:	0e 94 c7 06 	call	0xd8e	; 0xd8e <__mulhi_const_10>
 c8c:	82 0f       	add	r24, r18
 c8e:	91 1d       	adc	r25, r1
 c90:	21 91       	ld	r18, Z+
 c92:	20 53       	subi	r18, 0x30	; 48
 c94:	2a 30       	cpi	r18, 0x0A	; 10
 c96:	c0 f3       	brcs	.-16     	; 0xc88 <atoi+0x22>
 c98:	1e f4       	brtc	.+6      	; 0xca0 <atoi+0x3a>
 c9a:	90 95       	com	r25
 c9c:	81 95       	neg	r24
 c9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ca0:	08 95       	ret

00000ca2 <atol>:
 ca2:	1f 93       	push	r17
 ca4:	fc 01       	movw	r30, r24
 ca6:	99 27       	eor	r25, r25
 ca8:	88 27       	eor	r24, r24
 caa:	bc 01       	movw	r22, r24
 cac:	e8 94       	clt
 cae:	11 91       	ld	r17, Z+
 cb0:	10 32       	cpi	r17, 0x20	; 32
 cb2:	e9 f3       	breq	.-6      	; 0xcae <atol+0xc>
 cb4:	19 30       	cpi	r17, 0x09	; 9
 cb6:	10 f0       	brcs	.+4      	; 0xcbc <atol+0x1a>
 cb8:	1e 30       	cpi	r17, 0x0E	; 14
 cba:	c8 f3       	brcs	.-14     	; 0xcae <atol+0xc>
 cbc:	1b 32       	cpi	r17, 0x2B	; 43
 cbe:	51 f0       	breq	.+20     	; 0xcd4 <atol+0x32>
 cc0:	1d 32       	cpi	r17, 0x2D	; 45
 cc2:	49 f4       	brne	.+18     	; 0xcd6 <atol+0x34>
 cc4:	68 94       	set
 cc6:	06 c0       	rjmp	.+12     	; 0xcd4 <atol+0x32>
 cc8:	0e 94 b2 06 	call	0xd64	; 0xd64 <__mulsi_const_10>
 ccc:	61 0f       	add	r22, r17
 cce:	71 1d       	adc	r23, r1
 cd0:	81 1d       	adc	r24, r1
 cd2:	91 1d       	adc	r25, r1
 cd4:	11 91       	ld	r17, Z+
 cd6:	10 53       	subi	r17, 0x30	; 48
 cd8:	1a 30       	cpi	r17, 0x0A	; 10
 cda:	b0 f3       	brcs	.-20     	; 0xcc8 <atol+0x26>
 cdc:	3e f4       	brtc	.+14     	; 0xcec <atol+0x4a>
 cde:	90 95       	com	r25
 ce0:	80 95       	com	r24
 ce2:	70 95       	com	r23
 ce4:	61 95       	neg	r22
 ce6:	7f 4f       	sbci	r23, 0xFF	; 255
 ce8:	8f 4f       	sbci	r24, 0xFF	; 255
 cea:	9f 4f       	sbci	r25, 0xFF	; 255
 cec:	1f 91       	pop	r17
 cee:	08 95       	ret

00000cf0 <strtok>:
 cf0:	4c e7       	ldi	r20, 0x7C	; 124
 cf2:	55 e1       	ldi	r21, 0x15	; 21
 cf4:	0e 94 8b 06 	call	0xd16	; 0xd16 <strtok_r>
 cf8:	08 95       	ret

00000cfa <strncmp>:
 cfa:	fb 01       	movw	r30, r22
 cfc:	dc 01       	movw	r26, r24
 cfe:	41 50       	subi	r20, 0x01	; 1
 d00:	50 40       	sbci	r21, 0x00	; 0
 d02:	30 f0       	brcs	.+12     	; 0xd10 <strncmp+0x16>
 d04:	8d 91       	ld	r24, X+
 d06:	01 90       	ld	r0, Z+
 d08:	80 19       	sub	r24, r0
 d0a:	19 f4       	brne	.+6      	; 0xd12 <strncmp+0x18>
 d0c:	00 20       	and	r0, r0
 d0e:	b9 f7       	brne	.-18     	; 0xcfe <strncmp+0x4>
 d10:	88 1b       	sub	r24, r24
 d12:	99 0b       	sbc	r25, r25
 d14:	08 95       	ret

00000d16 <strtok_r>:
 d16:	fa 01       	movw	r30, r20
 d18:	a1 91       	ld	r26, Z+
 d1a:	b0 81       	ld	r27, Z
 d1c:	00 97       	sbiw	r24, 0x00	; 0
 d1e:	19 f4       	brne	.+6      	; 0xd26 <strtok_r+0x10>
 d20:	10 97       	sbiw	r26, 0x00	; 0
 d22:	e1 f0       	breq	.+56     	; 0xd5c <strtok_r+0x46>
 d24:	cd 01       	movw	r24, r26
 d26:	dc 01       	movw	r26, r24
 d28:	cd 01       	movw	r24, r26
 d2a:	0d 90       	ld	r0, X+
 d2c:	00 20       	and	r0, r0
 d2e:	11 f4       	brne	.+4      	; 0xd34 <strtok_r+0x1e>
 d30:	c0 01       	movw	r24, r0
 d32:	13 c0       	rjmp	.+38     	; 0xd5a <strtok_r+0x44>
 d34:	fb 01       	movw	r30, r22
 d36:	21 91       	ld	r18, Z+
 d38:	22 23       	and	r18, r18
 d3a:	19 f0       	breq	.+6      	; 0xd42 <strtok_r+0x2c>
 d3c:	20 15       	cp	r18, r0
 d3e:	d9 f7       	brne	.-10     	; 0xd36 <strtok_r+0x20>
 d40:	f3 cf       	rjmp	.-26     	; 0xd28 <strtok_r+0x12>
 d42:	fb 01       	movw	r30, r22
 d44:	21 91       	ld	r18, Z+
 d46:	20 15       	cp	r18, r0
 d48:	19 f4       	brne	.+6      	; 0xd50 <strtok_r+0x3a>
 d4a:	1e 92       	st	-X, r1
 d4c:	11 96       	adiw	r26, 0x01	; 1
 d4e:	06 c0       	rjmp	.+12     	; 0xd5c <strtok_r+0x46>
 d50:	22 23       	and	r18, r18
 d52:	c1 f7       	brne	.-16     	; 0xd44 <strtok_r+0x2e>
 d54:	0d 90       	ld	r0, X+
 d56:	00 20       	and	r0, r0
 d58:	a1 f7       	brne	.-24     	; 0xd42 <strtok_r+0x2c>
 d5a:	d0 01       	movw	r26, r0
 d5c:	fa 01       	movw	r30, r20
 d5e:	a1 93       	st	Z+, r26
 d60:	b0 83       	st	Z, r27
 d62:	08 95       	ret

00000d64 <__mulsi_const_10>:
 d64:	59 2f       	mov	r21, r25
 d66:	48 2f       	mov	r20, r24
 d68:	37 2f       	mov	r19, r23
 d6a:	26 2f       	mov	r18, r22
 d6c:	66 0f       	add	r22, r22
 d6e:	77 1f       	adc	r23, r23
 d70:	88 1f       	adc	r24, r24
 d72:	99 1f       	adc	r25, r25
 d74:	66 0f       	add	r22, r22
 d76:	77 1f       	adc	r23, r23
 d78:	88 1f       	adc	r24, r24
 d7a:	99 1f       	adc	r25, r25
 d7c:	62 0f       	add	r22, r18
 d7e:	73 1f       	adc	r23, r19
 d80:	84 1f       	adc	r24, r20
 d82:	95 1f       	adc	r25, r21
 d84:	66 0f       	add	r22, r22
 d86:	77 1f       	adc	r23, r23
 d88:	88 1f       	adc	r24, r24
 d8a:	99 1f       	adc	r25, r25
 d8c:	08 95       	ret

00000d8e <__mulhi_const_10>:
 d8e:	7a e0       	ldi	r23, 0x0A	; 10
 d90:	97 9f       	mul	r25, r23
 d92:	90 2d       	mov	r25, r0
 d94:	87 9f       	mul	r24, r23
 d96:	80 2d       	mov	r24, r0
 d98:	91 0d       	add	r25, r1
 d9a:	11 24       	eor	r1, r1
 d9c:	08 95       	ret

00000d9e <_exit>:
 d9e:	f8 94       	cli

00000da0 <__stop_program>:
 da0:	ff cf       	rjmp	.-2      	; 0xda0 <__stop_program>
